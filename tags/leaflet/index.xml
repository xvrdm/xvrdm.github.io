<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leaflet on Invalid Input</title>
    <link>/tags/leaflet/index.xml</link>
    <description>Recent content in Leaflet on Invalid Input</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/leaflet/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Clojure for pythonista - User Input/Loop/Conditional</title>
      <link>/2017/06/08/clojure-for-pythonista---user-input/loop/conditional/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/08/clojure-for-pythonista---user-input/loop/conditional/</guid>
      <description>&lt;div id=&#34;foreword&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Foreword&lt;/h2&gt;
&lt;p&gt;I am trying to learn clojure. This series of posts is my attempt to solve beginner exercises both in python and clojure. Exercises are inspired by the excellent Reuven Lerner’s &lt;a href=&#34;https://practicemakespython.com/&#34;&gt;Practice Makes Python&lt;/a&gt; and other sources like &lt;a href=&#34;https://learnpythonthehardway.org/&#34;&gt;Learn python the hard way&lt;/a&gt;. Before trying any exercises, you can read an excellent introduction to clojure : &lt;a href=&#34;http://www.braveclojure.com/do-things/&#34;&gt;Brave Clojure&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This exercise introduces the following concepts: user-input, conditional and loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;user-input&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;User input&lt;/h2&gt;
&lt;div id=&#34;goal&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Goal&lt;/h3&gt;
&lt;p&gt;Create a command line game where the user has to guess a number between 0 and 99. The final program should repeat the question until the user find the right number, providing a helpful “Higher!” or “Lower!” hint after each failed attempt.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-random-numbers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting random numbers&lt;/h3&gt;
&lt;p&gt;In python, random integers can be obtained from &lt;code&gt;randint&lt;/code&gt;, a function from the &lt;code&gt;random&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import random
# Get a random number between 0 and 99
number = random.randint(0, 100)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In clojure, you get random integer from the &lt;code&gt;rand-int&lt;/code&gt; function (which by default start at 0 and end at the first argument)&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;(def -main []
  (rand-int 100))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-user-input&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting user input&lt;/h3&gt;
&lt;p&gt;In python, you can get user input with the &lt;code&gt;input&lt;/code&gt; function. &lt;code&gt;input&lt;/code&gt; takes a string as an argument that you can use to display a prompt to the user. To make sure that the input is converted to a integer, we wrap the &lt;code&gt;input&lt;/code&gt; call in &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;guess = int(input(&amp;quot;Enter a guess: &amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In clojure, you can get user input with the &lt;a href=&#34;https://clojuredocs.org/clojure.core/read-line&#34;&gt;&lt;code&gt;read-line&lt;/code&gt;&lt;/a&gt; function. The conversion to an integer is also necessary and you can use &lt;code&gt;Integer/parseInt&lt;/code&gt; for that. &lt;code&gt;read-line&lt;/code&gt; doesn’t have prompt feature, so we will print the prompt to the console with &lt;a href=&#34;https://clojuredocs.org/clojure.core/read-line&#34;&gt;&lt;code&gt;println&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;(defn -main []
  (println &amp;quot;Enter a guess:&amp;quot;)
  (let [guess (Integer/parseInt (read-line))]))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conditionals&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conditionals&lt;/h3&gt;
&lt;p&gt;Now that we have a random number and a number entered by the user, we need to compare them and send the response response.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import random
number = random.randint(0, 100)
guess = int(input(&amp;quot;Enter a guess: &amp;quot;))

if number &amp;gt; guess:
    print(&amp;quot;Too small!&amp;quot;)
elif number &amp;lt; guess:
    print(&amp;quot;Too big!&amp;quot;)
else:
    print(&amp;quot;Correct!&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In clojure, the &lt;a href=&#34;http://www.braveclojure.com/do-things/#if&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; function seems to be designed for single comparison. It works as a simple “if/else”: &lt;code&gt;(if &amp;lt;test&amp;gt; &amp;lt;do-if-true&amp;gt; &amp;lt;do-if-false&amp;gt;)&lt;/code&gt;. There is no such thing as &lt;code&gt;elif&lt;/code&gt;. However, clojure has &lt;a href=&#34;https://clojuredocs.org/clojure.core/cond&#34;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/a&gt; function, which is like a switch/case statement (notoriously absent in python) and allow for as many comparison as we like.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;(defn -main []
  (let [number (rand-int 100)]
    (println &amp;quot;Enter a guess:&amp;quot;)
    (let [guess (Integer/parseInt (read-line))]
      (cond (&amp;gt; number guess)
              (println &amp;quot;Too Low!&amp;quot;)
            (&amp;lt; number guess)
              (println &amp;quot;Too Big!&amp;quot;)
            :else
              (println &amp;quot;Yeah!&amp;quot;)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;repeating-the-question&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Repeating the question&lt;/h3&gt;
&lt;p&gt;Lastly, we need to make the program able to repeat the question when the answer is wrong.&lt;/p&gt;
&lt;p&gt;In python, never-ending loop are often implemented with &lt;code&gt;while True&lt;/code&gt;, using the &lt;code&gt;break&lt;/code&gt; keyword to exit on specific conditions.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import random
number = random.randint(0, 100)

while True:
    guess = int(input(&amp;quot;Enter a guess: &amp;quot;))
    if number &amp;gt; guess:
        print(&amp;quot;Too small!&amp;quot;)
    elif number &amp;lt; guess:
        print(&amp;quot;Too big!&amp;quot;)
    else:
        print(&amp;quot;Correct!&amp;quot;)
        break&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In clojure, you can take the opposite approach. Rather than saying when to exit (&lt;code&gt;break&lt;/code&gt;), we can use the &lt;a href=&#34;http://www.braveclojure.com/do-things/#loop&#34;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt; function and tell it when to loop (&lt;code&gt;recur&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;(defn -main []
  (let [number (rand-int 100)]
    (loop []
      (println &amp;quot;Enter a guess:&amp;quot;)
      (let [guess (Integer/parseInt (read-line))]
        (cond (&amp;gt; number guess)
                (do (println &amp;quot;Too Low!&amp;quot;)
                    (recur))
              (&amp;lt; number guess)
                (do (println &amp;quot;Too Big!&amp;quot;)
                    (recur))
              :else
                (println &amp;quot;Yeah!&amp;quot;))))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we had to wrap the “actions” following each &lt;code&gt;cond&lt;/code&gt;’s conditions with the &lt;a href=&#34;http://www.braveclojure.com/do-things/#do&#34;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt; function, a simple way to group multiple statements into one. Otherwise, the first call to &lt;code&gt;(recur)&lt;/code&gt; (after “Too Low!”) would be interpreted as the second condition for &lt;code&gt;cond&lt;/code&gt; (instead of &lt;code&gt;(&amp;lt; number guess)&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Scrape a list of rental offers using rvest and purrr</title>
      <link>/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/</guid>
      <description>&lt;script src=&#34;../../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../../rmarkdown-libs/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;../../rmarkdown-libs/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../../rmarkdown-libs/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../../rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../../rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../../rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;../../rmarkdown-libs/leaflet-label/leaflet.label.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../../rmarkdown-libs/leaflet-label/leaflet.label.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/leaflet-providers/leaflet-providers.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/leaflet-providers-plugin/leaflet-providers-plugin.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The offers on real estate websites aren’t always in an easy-to-use format, especially if you want to compare offers from multiple agencies.&lt;/p&gt;
&lt;p&gt;In this post, we will see how to use R to scrape the details about the apartments listed on a single page on a real estate website.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scraping-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scraping the data&lt;/h2&gt;
&lt;div id=&#34;getting-to-know-the-site&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting to know the site&lt;/h3&gt;
&lt;p&gt;We start by looking at the real estate agent website. The section containing apartment rental offers can be found at this &lt;a href=&#34;https://www.moservernet.ch/en/apartments-for-rent/&#34;&gt;URL&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../img/1703311-scrsh-website-msrvrn.png&#34; alt=&#34;Apartment Rental section on website&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Apartment Rental section on website&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Each flat seem to be displayed in its own little box, which should derive from code not to hard to parse. But it would be even easier if the data was grabed from some kind of API.&lt;/p&gt;
&lt;p&gt;Looking at the network tab of the inspector, it doesn’t look like we can easily identify an API.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../../img/1703311-scrsh-network-msrvrn.png&#34; alt=&#34;Network tab from inspector tool on Apartment Rental section website&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Network tab from inspector tool on Apartment Rental section website&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We will need to fall back on scraping.&lt;/p&gt;
&lt;p&gt;Looking at the page source, we can see that all the information seem to be present so we won’t need to rely on a headless browser to execute Javascript. The data seems neatly organised.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/1703311-scrsh-source-msrvrn.png&#34; alt=&#34;Source code from Apartment Rental section on website&#34; /&gt; On the screenshot above, we can see that all the apartments are in a &lt;code&gt;div&lt;/code&gt; with the &lt;code&gt;id=offers&lt;/code&gt; (blue rectangle). Then each apartment is contained in its own &lt;code&gt;div&lt;/code&gt; with the &lt;code&gt;class=offer&lt;/code&gt; (red rectangles). We can also see that the different attributes of each flat are in separated &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; tags, usually with meaningful &lt;code&gt;class&lt;/code&gt; like &lt;code&gt;price-offer&lt;/code&gt;, &lt;code&gt;charge-offer&lt;/code&gt;, &lt;code&gt;size-offer&lt;/code&gt;… Very conveniently, and probably because they have a google map applet, the latitude and longitude are already available with the classes &lt;code&gt;info-obj-address-lat&lt;/code&gt; and &lt;code&gt;info-obj-address-lng&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-the-page-source-into-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting the page source into R&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;rvest&lt;/code&gt; library, we can grab the code of the site.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load needed packages
suppressMessages(library(dplyr))
suppressMessages(library(xml2))
suppressMessages(library(rvest))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an html document
listing_url &amp;lt;- &amp;quot;https://www.moservernet.ch/en/apartments-for-rent/&amp;quot;
listing_html &amp;lt;- xml2::read_html(listing_url)
listing_html&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {xml_document}
## &amp;lt;html&amp;gt;
## [1] &amp;lt;head&amp;gt;\n&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=u ...
## [2] &amp;lt;body&amp;gt;\n\t\t&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;\t\n\t\t\t&amp;lt;div class=&amp;quot;container&amp;quot; style=&amp;quot;h ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;isolate-the-html-for-the-offers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Isolate the html for the offers&lt;/h3&gt;
&lt;p&gt;Then we isolate the nodes with &lt;code&gt;class=offer&lt;/code&gt; contained in the &lt;code&gt;div&lt;/code&gt; with &lt;code&gt;id=offers&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;listing_offers &amp;lt;- listing_html %&amp;gt;%
  rvest::html_nodes(&amp;quot;#offers .offer&amp;quot;)
head(listing_offers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {xml_nodeset (6)}
## [1] &amp;lt;div class=&amp;quot;offer cat1 cat2 3&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-f ...
## [2] &amp;lt;div class=&amp;quot;offer cat2 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-for-re ...
## [3] &amp;lt;div class=&amp;quot;offer cat2 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-for-re ...
## [4] &amp;lt;div class=&amp;quot;offer cat3 cat4 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-f ...
## [5] &amp;lt;div class=&amp;quot;offer cat3 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-for-re ...
## [6] &amp;lt;div class=&amp;quot;offer cat1 cat2 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-f ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parsing-the-offers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Parsing the offers&lt;/h3&gt;
&lt;p&gt;Now that we have a list of offers, we need to find a way to extract the data of interest from each offer and store it in a usable format. There are at least two way to proceed: a “field centric” way and an “offer centric” way.&lt;/p&gt;
&lt;div id=&#34;parsing-with-the-field-centric-way&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Parsing with the field centric way&lt;/h4&gt;
&lt;p&gt;In the “field centric” way, we grab one field of interest (&lt;code&gt;rent&lt;/code&gt;, &lt;code&gt;rooms&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;…) at a time for all the offers. We end up with vectors containing the value of the field for each offer. These vector can then be combined into a dataframe. The “field centric” way is described in the lego movie example on &lt;code&gt;rvest&lt;/code&gt;’s &lt;a href=&#34;http://web.archive.org/web/20160113072819/https://github.com/hadley/rvest&#34;&gt;github repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; can be stored as text and only need a bit of cleanup.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;id &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.ref&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  stringr::str_replace(&amp;quot;Ref. &amp;quot;,&amp;quot;&amp;quot;)

address &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.location-offer&amp;quot;) %&amp;gt;%
  rvest::html_text()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rooms&lt;/code&gt;, &lt;code&gt;latitude&lt;/code&gt;, &lt;code&gt;longitude&lt;/code&gt;, &lt;code&gt;rent&lt;/code&gt; and &lt;code&gt;charges&lt;/code&gt; are better saved as numeric after removal of prefix/suffix like currencies.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rooms &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.ref-offer&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  stringr::str_replace(&amp;quot; room[s]*&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  as.numeric()

latitude &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.infos-objet-address-lat&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  as.numeric()

longitude &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.infos-objet-address-lng&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  as.numeric()

rent &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.price-offer&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  stringr::str_replace(&amp;quot;CHF &amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_replace_all(&amp;quot;[.]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_replace(&amp;quot;[-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  as.numeric()

charges &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.charge-offer&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  stringr::str_replace(&amp;quot;Charges: CHF &amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_replace_all(&amp;quot;[.]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_replace(&amp;quot;[-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  as.numeric()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All these vectors can then be combined in a dataframe, which is nicely displayed in an interactive datatable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;offers &amp;lt;- data.frame(id, 
                     rooms, 
                     address, 
                     latitude, 
                     longitude, 
                     rent, 
                     charges)

library(DT)
DT::datatable(
  offers,
  options = list(pageLength = 5, dom = &amp;#39;tpi&amp;#39;),
  rownames = FALSE,
  caption = &amp;quot;Table 1 : Offers scraped using the field centric way&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;caption&#34;:&#34;&lt;caption&gt;Table 1 : Offers scraped using the field centric way&lt;\/caption&gt;&#34;,&#34;data&#34;:[[&#34;0577.45.0530&#34;,&#34;2454.44.0030&#34;,&#34;2040.41.0020&#34;,&#34;2066.41.0010&#34;,&#34;0510.45.0030&#34;,&#34;2457.41.0020&#34;,&#34;2018.48.0020&#34;,&#34;2020.47.0020&#34;,&#34;2190.44.0030&#34;,&#34;0577.43.0340&#34;,&#34;0090.45.0040&#34;,&#34;0329.49.0020&#34;,&#34;0108.43.0020&#34;,&#34;0022.42.0010&#34;,&#34;0033.45.0020&#34;,&#34;0138.40.0020&#34;,&#34;0690.41.0020&#34;,&#34;2062.43.0050&#34;,&#34;0571.43.0040&#34;,&#34;2469.40.0020&#34;,&#34;0022.40.0010&#34;,&#34;0022.43.0010&#34;,&#34;0082.44.0030&#34;,&#34;0569.42.0210&#34;,&#34;2581.43.0010&#34;,&#34;0695.42.0010&#34;,&#34;0615.45.0010&#34;,&#34;0294.43.0020&#34;,&#34;2027.46.0060&#34;,&#34;0579.51.0010&#34;],[1.5,2,2,3.5,3,1.5,2.5,2.5,1,3.5,3.5,5,4.5,3.5,4.5,3.5,4.5,4,4.5,3,4.5,4,3,5.5,5.5,6,6,7.5,6,6.5],[&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue du Levant 3&#34;,&#34;Rue Henri-ChristinÃ© 6&#34;,&#34;Rue du BelvÃ©dÃ¨re 9&#34;,&#34;Rue Chandieu 1&#34;,&#34;Rue du Vidollet 11&#34;,&#34;Chemin Taverney 6&#34;,&#34;Chemin Taverney 10&#34;,&#34;Grand-Rue 10&#34;,&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue de la DÃ´le 12&#34;,&#34;Rue des Bossons 80&#34;,&#34;Chemin des Palettes 33&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Michel-Chauvet 4&#34;,&#34;Chemin de Castelver 10&#34;,&#34;Rue Lamartine 24 B&#34;,&#34;Rue de la Faucille 14&#34;,&#34;Rue Emile-Yung 6&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Rue Saint-LÃ©ger 8&#34;,&#34;Rue du Fort-Barreau 13&#34;,&#34;Chemin Charles-Poluzzi 29&#34;,&#34;Rue du ChÃ¢teau 2&#34;,&#34;Route de ChÃªne 53&#34;,&#34;Rue Jacques-Dalphin 37&#34;,&#34;Rue Charles-Giron 1&#34;,&#34;Chemin de Beau-Soleil 5&#34;],[46.2122871,46.2117575,46.1945565,46.2049981,46.2158774,46.2159927,46.2299972,46.2297057,46.20209,46.2122871,46.2076048,46.1882995,46.1750094,46.2167452,46.2024683,46.1982716,46.1655653,46.2111247,46.2112803,46.195653,46.2167452,46.2167452,46.1976599,46.2113528,46.1792898,46.2043919,46.2001689,46.1818628,46.2061894,46.1879451],[6.1143063,6.1477936,6.1424891,6.1311477,6.1344373,6.1381931,6.1177381,6.118199,6.1451254,6.1143063,6.13172,6.1103174,6.1193707,6.1316818,6.1840869,6.1565411,6.1866597,6.1295749,6.1399257,6.1493547,6.1316818,6.1316818,6.1462625,6.1407533,6.1479551,6.1308513,6.1723494,6.1401097,6.1306914,6.1598356],[842,950,1250,1350,1500,1500,1580,1580,1600,1670,1750,1950,2100,2160,2200,2300,2360,2400,2800,2800,3030,3117,3200,3350,3500,4200,4500,4900,5050,6500],[80,100,85,null,120,70,90,90,100,165,145,200,170,160,205,155,140,180,170,null,200,220,150,197,200,265,350,350,350,385]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id&lt;\/th&gt;\n      &lt;th&gt;rooms&lt;\/th&gt;\n      &lt;th&gt;address&lt;\/th&gt;\n      &lt;th&gt;latitude&lt;\/th&gt;\n      &lt;th&gt;longitude&lt;\/th&gt;\n      &lt;th&gt;rent&lt;\/th&gt;\n      &lt;th&gt;charges&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;dom&#34;:&#34;tpi&#34;,&#34;columnDefs&#34;:[{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:[1,3,4,5,6]}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;parsing-with-the-offer-centric-way&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Parsing with the offer centric way&lt;/h4&gt;
&lt;p&gt;In the “offer centric” way, we parse one offer at a time, extract all the fields of interest and store it into a list. We end up with a list of lists, where each list contain all the fields for one offer.&lt;/p&gt;
&lt;p&gt;To parse each offer, we are going to create a function &lt;code&gt;parse_offer&lt;/code&gt; that works well on one offer and apply it to each offer with the help of the &lt;code&gt;purrr&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Note that we are searching only for one value, so we use &lt;code&gt;html_node&lt;/code&gt; and not &lt;code&gt;html_nodes&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_offer &amp;lt;- function(offer) {
  list(
    id = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.ref&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      stringr::str_replace(&amp;quot;Ref. &amp;quot;,&amp;quot;&amp;quot;),
    
    address = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.location-offer&amp;quot;) %&amp;gt;%
      rvest::html_text(),
  
    room = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.ref-offer&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      stringr::str_replace(&amp;quot; room[s]*&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      as.numeric(),
    
    latitude = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.infos-objet-address-lat&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      as.numeric(),

    longitude = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.infos-objet-address-lng&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      as.numeric(),

    rent = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.price-offer&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      stringr::str_replace(&amp;quot;CHF &amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      stringr::str_replace_all(&amp;quot;[.]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      stringr::str_replace(&amp;quot;[-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      as.numeric(),

    charges = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.charge-offer&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      stringr::str_replace(&amp;quot;Charges: CHF &amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      stringr::str_replace_all(&amp;quot;[.]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      stringr::str_replace(&amp;quot;[-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      as.numeric()
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;purrr::map&lt;/code&gt; will create a list of lists. Each list in the list of lists can be bound as a row in a dataframe, thanks to &lt;code&gt;dplyr::bind_rows()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(purrr))

offers &amp;lt;- listing_offers %&amp;gt;%
  purrr::map(parse_offer) %&amp;gt;%
  dplyr::bind_rows() %&amp;gt;%
  na.omit()

DT::datatable(
  offers,
  options = list(pageLength = 5, dom = &amp;#39;tpi&amp;#39;),
  rownames = FALSE,
  caption = &amp;quot;Table 2 : Offers scraped using the offer centric way&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;caption&#34;:&#34;&lt;caption&gt;Table 2 : Offers scraped using the offer centric way&lt;\/caption&gt;&#34;,&#34;data&#34;:[[&#34;0577.45.0530&#34;,&#34;2454.44.0030&#34;,&#34;2040.41.0020&#34;,&#34;0510.45.0030&#34;,&#34;2457.41.0020&#34;,&#34;2018.48.0020&#34;,&#34;2020.47.0020&#34;,&#34;2190.44.0030&#34;,&#34;0577.43.0340&#34;,&#34;0090.45.0040&#34;,&#34;0329.49.0020&#34;,&#34;0108.43.0020&#34;,&#34;0022.42.0010&#34;,&#34;0033.45.0020&#34;,&#34;0138.40.0020&#34;,&#34;0690.41.0020&#34;,&#34;2062.43.0050&#34;,&#34;0571.43.0040&#34;,&#34;0022.40.0010&#34;,&#34;0022.43.0010&#34;,&#34;0082.44.0030&#34;,&#34;0569.42.0210&#34;,&#34;2581.43.0010&#34;,&#34;0695.42.0010&#34;,&#34;0615.45.0010&#34;,&#34;0294.43.0020&#34;,&#34;2027.46.0060&#34;,&#34;0579.51.0010&#34;],[&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue du Levant 3&#34;,&#34;Rue Henri-ChristinÃ© 6&#34;,&#34;Rue Chandieu 1&#34;,&#34;Rue du Vidollet 11&#34;,&#34;Chemin Taverney 6&#34;,&#34;Chemin Taverney 10&#34;,&#34;Grand-Rue 10&#34;,&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue de la DÃ´le 12&#34;,&#34;Rue des Bossons 80&#34;,&#34;Chemin des Palettes 33&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Michel-Chauvet 4&#34;,&#34;Chemin de Castelver 10&#34;,&#34;Rue Lamartine 24 B&#34;,&#34;Rue de la Faucille 14&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Rue Saint-LÃ©ger 8&#34;,&#34;Rue du Fort-Barreau 13&#34;,&#34;Chemin Charles-Poluzzi 29&#34;,&#34;Rue du ChÃ¢teau 2&#34;,&#34;Route de ChÃªne 53&#34;,&#34;Rue Jacques-Dalphin 37&#34;,&#34;Rue Charles-Giron 1&#34;,&#34;Chemin de Beau-Soleil 5&#34;],[1.5,2,2,3,1.5,2.5,2.5,1,3.5,3.5,5,4.5,3.5,4.5,3.5,4.5,4,4.5,4.5,4,3,5.5,5.5,6,6,7.5,6,6.5],[46.2122871,46.2117575,46.1945565,46.2158774,46.2159927,46.2299972,46.2297057,46.20209,46.2122871,46.2076048,46.1882995,46.1750094,46.2167452,46.2024683,46.1982716,46.1655653,46.2111247,46.2112803,46.2167452,46.2167452,46.1976599,46.2113528,46.1792898,46.2043919,46.2001689,46.1818628,46.2061894,46.1879451],[6.1143063,6.1477936,6.1424891,6.1344373,6.1381931,6.1177381,6.118199,6.1451254,6.1143063,6.13172,6.1103174,6.1193707,6.1316818,6.1840869,6.1565411,6.1866597,6.1295749,6.1399257,6.1316818,6.1316818,6.1462625,6.1407533,6.1479551,6.1308513,6.1723494,6.1401097,6.1306914,6.1598356],[842,950,1250,1500,1500,1580,1580,1600,1670,1750,1950,2100,2160,2200,2300,2360,2400,2800,3030,3117,3200,3350,3500,4200,4500,4900,5050,6500],[80,100,85,120,70,90,90,100,165,145,200,170,160,205,155,140,180,170,200,220,150,197,200,265,350,350,350,385]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id&lt;\/th&gt;\n      &lt;th&gt;address&lt;\/th&gt;\n      &lt;th&gt;room&lt;\/th&gt;\n      &lt;th&gt;latitude&lt;\/th&gt;\n      &lt;th&gt;longitude&lt;\/th&gt;\n      &lt;th&gt;rent&lt;\/th&gt;\n      &lt;th&gt;charges&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;dom&#34;:&#34;tpi&#34;,&#34;columnDefs&#34;:[{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:[2,3,4,5,6]}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualize the data&lt;/h2&gt;
&lt;div id=&#34;looking-at-bivariate-relationship&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Looking at bivariate relationship&lt;/h3&gt;
&lt;p&gt;We can check if rent and charges seem to be correlated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(ggplot2))
suppressMessages(library(hrbrthemes))

offers %&amp;gt;% ggplot(aes(x=rent, y=charges)) + 
  geom_jitter(alpha=0.5) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, size=0.5, se = F, color=&amp;quot;black&amp;quot;) + 
  annotate(geom=&amp;quot;label&amp;quot;, x=max(offers$rent), y=min(offers$charges),
           label=paste(&amp;quot;r(rent, charge) =&amp;quot;, round(cor(offers$rent, offers$charges), 3)), 
           hjust=1, fill=&amp;quot;black&amp;quot;, alpha=&amp;quot;0.5&amp;quot;, color=&amp;quot;white&amp;quot;) +
  labs(title=stringr::str_to_title(&amp;quot;Do charges go up with rent?&amp;quot;),
       subtitle=&amp;quot;There seems to be a positive linear relationship between rent and charges.&amp;quot;) +
  theme_ipsum_rc()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/1703311-scrape-a-list-of-rental-offers-using-rvest-and-purrr_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;seeing-the-results-on-a-map&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Seeing the results on a map&lt;/h3&gt;
&lt;p&gt;Lastly, because latitude and longitude were so easily obtained, we can pin each flat on a leaflet map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(leaflet))

m &amp;lt;- leaflet(offers) %&amp;gt;%
  addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;) %&amp;gt;%
  addMarkers(lng=~longitude,
             lat=~latitude,
             popup=offers$address)
m&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addProviderTiles&#34;,&#34;args&#34;:[&#34;CartoDB.Positron&#34;,null,null,{&#34;errorTileUrl&#34;:&#34;&#34;,&#34;noWrap&#34;:false,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false}]},{&#34;method&#34;:&#34;addMarkers&#34;,&#34;args&#34;:[[46.2122871,46.2117575,46.1945565,46.2158774,46.2159927,46.2299972,46.2297057,46.20209,46.2122871,46.2076048,46.1882995,46.1750094,46.2167452,46.2024683,46.1982716,46.1655653,46.2111247,46.2112803,46.2167452,46.2167452,46.1976599,46.2113528,46.1792898,46.2043919,46.2001689,46.1818628,46.2061894,46.1879451],[6.1143063,6.1477936,6.1424891,6.1344373,6.1381931,6.1177381,6.118199,6.1451254,6.1143063,6.13172,6.1103174,6.1193707,6.1316818,6.1840869,6.1565411,6.1866597,6.1295749,6.1399257,6.1316818,6.1316818,6.1462625,6.1407533,6.1479551,6.1308513,6.1723494,6.1401097,6.1306914,6.1598356],null,null,null,{&#34;clickable&#34;:true,&#34;draggable&#34;:false,&#34;keyboard&#34;:true,&#34;title&#34;:&#34;&#34;,&#34;alt&#34;:&#34;&#34;,&#34;zIndexOffset&#34;:0,&#34;opacity&#34;:1,&#34;riseOnHover&#34;:false,&#34;riseOffset&#34;:250},[&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue du Levant 3&#34;,&#34;Rue Henri-ChristinÃ© 6&#34;,&#34;Rue Chandieu 1&#34;,&#34;Rue du Vidollet 11&#34;,&#34;Chemin Taverney 6&#34;,&#34;Chemin Taverney 10&#34;,&#34;Grand-Rue 10&#34;,&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue de la DÃ´le 12&#34;,&#34;Rue des Bossons 80&#34;,&#34;Chemin des Palettes 33&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Michel-Chauvet 4&#34;,&#34;Chemin de Castelver 10&#34;,&#34;Rue Lamartine 24 B&#34;,&#34;Rue de la Faucille 14&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Rue Saint-LÃ©ger 8&#34;,&#34;Rue du Fort-Barreau 13&#34;,&#34;Chemin Charles-Poluzzi 29&#34;,&#34;Rue du ChÃ¢teau 2&#34;,&#34;Route de ChÃªne 53&#34;,&#34;Rue Jacques-Dalphin 37&#34;,&#34;Rue Charles-Giron 1&#34;,&#34;Chemin de Beau-Soleil 5&#34;],null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[46.1655653,46.2299972],&#34;lng&#34;:[6.1103174,6.1866597]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ressources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ressources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;Homepage for rvest repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stat4701.github.io/edav/2015/04/02/rvest_tutorial/&#34;&gt;Tutorial explaining rvest basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>