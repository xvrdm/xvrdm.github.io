<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Invalid Input</title>
    <link>/post/index.xml</link>
    <description>Recent content in Posts on Invalid Input</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Jul 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Scraping javascript generated content with splashr</title>
      <link>/2017/07/26/scraping-javascript-generated-content-with-splashr/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/26/scraping-javascript-generated-content-with-splashr/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;While scraping rental listings, it’s useful to verify that the scripts managed to grab all the offers. This is nice to have on simple &lt;a href=&#34;https://www.moservernet.ch/en/apartments-for-rent/&#34;&gt;fully loaded single page&lt;/a&gt;, but even nicer if the rental listings are set up as a &lt;a href=&#34;http://www.brolliet.ch/en/rent/&#34;&gt;infinite scroll page&lt;/a&gt;, which seem increasingly popular on real estate websites and require multiple calls from the scraper.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1707263-scrsh-count-msrvrn.png&#34; alt=&#34;Count of offers on rental websites.&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Count of offers on rental websites.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Even when they don’t load all the results, the websites nearly always indicate the number of matched offers. This can be used to verify that our final dataset has the correct number of rows.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scraping-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scraping the data&lt;/h2&gt;
&lt;div id=&#34;scraping-static-content&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scraping static content&lt;/h3&gt;
&lt;p&gt;Using &lt;a href=&#34;https://xvrdm.github.io/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/&#34;&gt;our previous example&lt;/a&gt;, we can see that the number of matched offers is written on the page.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1707261-scrsh-count-msrvrn.png&#34; alt=&#34;Count of offers can be found on the page.&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Count of offers can be found on the page.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Inspect the html of the page to find the id/class of the number of results and store it in a variable. We can complete the code as below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load needed packages
suppressMessages(library(xml2))
suppressMessages(library(rvest))

# Create an html document
listing_url &amp;lt;- &amp;quot;https://www.moservernet.ch/en/apartments-for-rent/&amp;quot;
listing_html &amp;lt;- xml2::read_html(listing_url)

# Find the number of listed offers
listing_html %&amp;gt;%
  html_node(&amp;quot;#count-search&amp;quot;) %&amp;gt;%
  html_text()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;()&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Empty? It looks like the count is actually populated by a tiny bit of javascript, so it’s not available when we parse the page source.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1707262-scrsh-js-msrvrn.png&#34; alt=&#34;The counter is updated by Javascript.&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;The counter is updated by Javascript.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;scraping-content-generated-by-javascript&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scraping content generated by javascript&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;xml2::read_html&lt;/code&gt; by itself cannot inspect the content generated by javascript. For that we can use another library &lt;a href=&#34;https://github.com/hrbrmstr/splashr&#34;&gt;&lt;code&gt;splashr&lt;/code&gt;&lt;/a&gt;. In a nutshell, &lt;code&gt;splashr&lt;/code&gt; lets you spin and interact with a &lt;a href=&#34;https://splash.readthedocs.io/en/stable/&#34;&gt;splash&lt;/a&gt; headless browser in a &lt;a href=&#34;https://www.docker.com/&#34;&gt;docker&lt;/a&gt; container. If this sounds like jibberish, let’s try a translation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“spin and interact with a headless browser”: create a virtual browser (we won’t see it, it happens in the background) that will browse/render the page and give us back it’s content (including the javascript generated content). “Splash” is one these headless browsers, but you might have heard of another one named “phantomJS”.&lt;/li&gt;
&lt;li&gt;“in a docker container”: think of docker is a way to easily run lightweight virtual machines (called container). So rather than installing splash and all its python dependencies, we will run a virtual machine with splash installed in it and destroy it when we are done, leaving our main system untouched.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Installing docker is beyond the scope of this post, but there are tons of ressource online. At the time of this writing, to install &lt;code&gt;splashr&lt;/code&gt; and &lt;code&gt;harbor&lt;/code&gt; (the package that manages docker from R), you need to grab them from github.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;devtools::install_github(&amp;quot;wch/harbor&amp;quot;)
devtools::install_github(&amp;quot;hrbrmstr/splashr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The very first time we run &lt;code&gt;splashr&lt;/code&gt;, it might be a bit slow: it will have to download the docker image (the template used to create container) that has &lt;code&gt;Splash&lt;/code&gt; installed in it. The image is documented &lt;a href=&#34;https://hub.docker.com/r/hrbrmstr/splashttpd/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(splashr))
install_splash()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using default tag: latest
## latest: Pulling from hrbrmstr/splashttpd
## Digest: sha256:ef25cda0c8e4c488ff9e002191fc506e05841d1f5af24d00a6450033ae7ac80c
## Status: Image is up to date for hrbrmstr/splashttpd:latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then use &lt;code&gt;splashr&lt;/code&gt; to create a &lt;code&gt;splash&lt;/code&gt; container and get the &lt;code&gt;html&lt;/code&gt;, this time with javascript generated content in it. The &lt;code&gt;xml2&lt;/code&gt; functions can still be used on the html returned by &lt;code&gt;splashr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I added a wait time of two seconds between &lt;code&gt;start_splash&lt;/code&gt; and &lt;code&gt;render_html&lt;/code&gt; because I kept getting errors looking like &lt;code&gt;render_html&lt;/code&gt; was called before the container was fully operational.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;splash_container &amp;lt;- splashr::start_splash()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2bd11092c378745aa9078ba0059f059854a25f1c022171138ac84958e4cf60f0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sys.sleep(2)
listing_html_js &amp;lt;- splashr::render_html(url = listing_url)

count &amp;lt;- listing_html_js %&amp;gt;%
  html_node(&amp;quot;#count-search&amp;quot;) %&amp;gt;%
  html_text()
print(paste(&amp;quot;count value is:&amp;quot;, count))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;count value is: (20 results)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The number is extracted with a little regular expression and the &lt;code&gt;stringr&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;offer_number &amp;lt;- stringr::str_extract(count, &amp;quot;[0-9]+&amp;quot;) 
print(paste(&amp;quot;offer_number value is:&amp;quot;, offer_number))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;offer_number value is: 20&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don’t forget to stop and delete your container.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stop_splash(splash_container)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2bd11092c378&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have the expected number of offers, which we can use to verify our final dataset (read &lt;a href=&#34;https://xvrdm.github.io/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/&#34;&gt;previous post&lt;/a&gt; to see how).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Testing Flask SQLAlchemy database with pytest</title>
      <link>/2017/07/03/testing-flask-sqlalchemy-database-with-pytest/</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/03/testing-flask-sqlalchemy-database-with-pytest/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://testdriven.io/part-one-test-setup/&#34;&gt;Early in the tutorial&lt;/a&gt;, the author explains how to set up your app to use &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://github.com/jarus/flask-testing&#34;&gt;&lt;code&gt;Flask-Testing&lt;/code&gt;&lt;/a&gt; extension for its test framework. Since I wanted to use &lt;a href=&#34;https://docs.pytest.org/en/latest/&#34;&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt;, this was a good opportunity to explore the test setup a bit more in depth.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;running-pytest-from-a-script&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Running pytest from a script&lt;/h2&gt;
&lt;p&gt;Firstly, add &lt;code&gt;pytest&lt;/code&gt; to your &lt;code&gt;requirements.txt&lt;/code&gt; and place a dummy test in the &lt;code&gt;project/tests&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def test_dummy():
    assert True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Secondly, add a &lt;code&gt;manager.command&lt;/code&gt; to &lt;code&gt;manage.py&lt;/code&gt; that run the pytest tests.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# manage.py
import pytest
@manager.command
def test():
    &amp;quot;&amp;quot;&amp;quot;Runs the tests.&amp;quot;&amp;quot;&amp;quot;
    pytest.main([&amp;quot;-s&amp;quot;, &amp;quot;project/tests&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some notes: - To find info on calling pytest directly from python code, go &lt;a href=&#34;https://docs.pytest.org/en/latest/usage.html#calling-pytest-from-python-code&#34;&gt;here&lt;/a&gt; - I first tried to just run &lt;code&gt;pytest.main()&lt;/code&gt; and ended up with some “File not found” error. You need to provide an empty list &lt;code&gt;[]&lt;/code&gt; at the very least. The error is discussed more in depth &lt;a href=&#34;https://github.com/pytest-dev/pytest/issues/1110&#34;&gt;here&lt;/a&gt;. - Running &lt;code&gt;pytest.main([])&lt;/code&gt; with an empty list will look for test everywhere in your project. If you have placed the &lt;code&gt;env&lt;/code&gt; dir in &lt;code&gt;/project&lt;/code&gt;, with all the sources of your virtual environment packages, you might find tons of tests that you did not want to touch. Therefore, it’s better to target specifically the &lt;code&gt;project/tests&lt;/code&gt; dir with the last argument &lt;code&gt;project/tests&lt;/code&gt;. - Adding &lt;code&gt;-s&lt;/code&gt; to the pytest command lets pytest print to the console any print statements that you use in your tests, not just the ones from failing tests.&lt;/p&gt;
&lt;p&gt;We can now run the test on the running containers with:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ docker-compose run users-service python manage.py test 

== test session starts ==
platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0
rootdir: /usr/src/app, inifile:
collected 1 items 

project/tests/test_ping.py .

== 1 passed in 0.01 seconds ==&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-an-app-fixture&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating an app fixture&lt;/h2&gt;
&lt;p&gt;In the tutorial, the author creates the class &lt;code&gt;BaseTestCase&lt;/code&gt; in &lt;code&gt;project/tests/base.py&lt;/code&gt;, which imports the &lt;code&gt;app&lt;/code&gt; from &lt;code&gt;project&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# http://testdriven.io/part-one-test-setup/
# project/tests/base.py 
[...]
from project import app, db


class BaseTestCase(TestCase):
    def create_app(self):
        app.config.from_object(&amp;#39;project.config.TestingConfig&amp;#39;)
        return app
[...]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;app&lt;/code&gt; instance can then be used in our different tests, without needing to reimport the app for each test. At the beginning of its &lt;code&gt;project/tests/test_users.py&lt;/code&gt;, you can see that the class &lt;code&gt;TestUserService&lt;/code&gt; inherits from &lt;code&gt;BaseTestCase&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# http://testdriven.io/part-one-test-setup/
# project/tests/test_users.py 
[...]
from project.tests.base import BaseTestCase


class TestUserService(BaseTestCase):
[...]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reusable objects for tests are called fixtures. In &lt;code&gt;unittest&lt;/code&gt;, fixtures are defined as classes with two special functions &lt;code&gt;setUp&lt;/code&gt; and &lt;code&gt;tearDown&lt;/code&gt;, that are &lt;a href=&#34;https://docs.python.org/3/library/unittest.html#organizing-test-code&#34;&gt;executed before/after each test&lt;/a&gt;. &lt;a href=&#34;https://docs.pytest.org/en/latest/fixture.html&#34; class=&#34;uri&#34;&gt;https://docs.pytest.org/en/latest/fixture.html&lt;/a&gt;). We will cover their pytest implementations later.&lt;/p&gt;
&lt;p&gt;Rather than importing the app, we will first move the code to the &lt;a href=&#34;http://flask.pocoo.org/docs/0.12/patterns/appfactories/&#34;&gt;Application Factories pattern&lt;/a&gt; (also used in the tutorial &lt;a href=&#34;http://testdriven.io/part-one-flask-blueprints/&#34;&gt;soon after&lt;/a&gt;). Rewrite your &lt;code&gt;project/__init__.py&lt;/code&gt; as below:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/__init__.py
import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy


db = SQLAlchemy()


class User(db.Model):
    __tablename__ = &amp;quot;users&amp;quot;
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    username = db.Column(db.String(128), nullable=False)
    email = db.Column(db.String(128), nullable=False)
    active = db.Column(db.Boolean(), default=False, nullable=False)
    created_at = db.Column(db.DateTime, nullable=False)

    def __init__(self, username, email):
        self.username = username
        self.email = email
        self.created_at = datetime.datetime.now()


def create_app():
    app = Flask(__name__)

    app_settings = os.getenv(&amp;#39;APP_SETTINGS&amp;#39;)
    app.config.from_object(app_settings)

    db.init_app(app)

    @app.route(&amp;#39;/ping&amp;#39;, methods=[&amp;#39;GET&amp;#39;])
    def ping_pong():
        return jsonify({
            &amp;#39;status&amp;#39;: &amp;#39;Epic success&amp;#39;,
            &amp;#39;message&amp;#39;: &amp;#39;pong!&amp;#39;
        })

    return app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a &lt;code&gt;create_app()&lt;/code&gt; function, that can return an &lt;code&gt;app&lt;/code&gt; instance. In pytest, fixture are defined as function, with the &lt;code&gt;@pytest.fixture&lt;/code&gt; decorator.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/tests/conftest.py
import pytest
from project import create_app


@pytest.fixture
def app():
    app = create_app()
    app.config.from_object(&amp;#39;project.config.TestingConfig&amp;#39;)
    return app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tests in pytest are also just function, named with the prefix &lt;code&gt;test_&lt;/code&gt;. To use a fixture in a test, just add it as an argument. Note that assertions are simpler than in unittest, you only need the &lt;code&gt;assert&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Test the different configurations:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/tests/test_config.py
import os


def test_development_config(app):
    app.config.from_object(&amp;#39;project.config.DevelopmentConfig&amp;#39;)
    assert app.config[&amp;#39;DEBUG&amp;#39;]
    assert not app.config[&amp;#39;TESTING&amp;#39;]
    assert app.config[&amp;#39;SQLALCHEMY_DATABASE_URI&amp;#39;] == os.environ.get(
        &amp;#39;DATABASE_URL&amp;#39;)


def test_testing_config(app):
    app.config.from_object(&amp;#39;project.config.TestingConfig&amp;#39;)
    assert app.config[&amp;#39;DEBUG&amp;#39;]
    assert app.config[&amp;#39;TESTING&amp;#39;]
    assert not app.config[&amp;#39;PRESERVE_CONTEXT_ON_EXCEPTION&amp;#39;]
    assert app.config[&amp;#39;SQLALCHEMY_DATABASE_URI&amp;#39;] == os.environ.get(
        &amp;#39;DATABASE_TEST_URL&amp;#39;)


def test_production_config(app):
    app.config.from_object(&amp;#39;project.config.ProductionConfig&amp;#39;)
    assert not app.config[&amp;#39;DEBUG&amp;#39;]
    assert not app.config[&amp;#39;TESTING&amp;#39;]
    assert app.config[&amp;#39;SQLALCHEMY_DATABASE_URI&amp;#39;] == os.environ.get(
        &amp;#39;DATABASE_URL&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Testing the ping route (using &lt;a href=&#34;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.test_client&#34;&gt;&lt;code&gt;test_client()&lt;/code&gt;&lt;/a&gt; to get a &lt;code&gt;client&lt;/code&gt; that can test routes):&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/tests/test_ping.py
import json


def test_ping(app):
    client = app.test_client()
    resp = client.get(&amp;#39;/ping&amp;#39;)
    data = json.loads(resp.data.decode())
    assert resp.status_code == 200
    assert &amp;#39;pong&amp;#39; in data[&amp;#39;message&amp;#39;]
    assert &amp;#39;success&amp;#39; in data[&amp;#39;status&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;accessing-the-database-from-the-tests&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Accessing the database from the tests&lt;/h2&gt;
&lt;div id=&#34;making-tables-accessible-with-create_all&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Making tables accessible with &lt;code&gt;create_all()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;So far we haven’t put any code related to the database in our &lt;code&gt;app&lt;/code&gt; fixture. The tutorial has done so in &lt;code&gt;BaseTestCase&lt;/code&gt;. If we rewrite the &lt;a href=&#34;http://testdriven.io/part-one-restful-routes/&#34;&gt;&lt;code&gt;test_add_user&lt;/code&gt;&lt;/a&gt; for pytest and try to run it, we get an error.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/tests/test_users.py
def test_add_user(app):
    &amp;quot;&amp;quot;&amp;quot;Ensure a new user can be added to the database.&amp;quot;&amp;quot;&amp;quot;
    with app.test_client() as client:
        response = client.post(
            &amp;#39;/users&amp;#39;,
            data=json.dumps(dict(
                username=&amp;#39;michael&amp;#39;,
                email=&amp;#39;michael@realpython.com&amp;#39;
            )),
            content_type=&amp;#39;application/json&amp;#39;,
        )
        data = json.loads(response.data.decode())
        assert response.status_code == 201
        assert &amp;#39;michael@realpython.com was added!&amp;#39; in data[&amp;#39;message&amp;#39;]
        assert &amp;#39;success&amp;#39; in data[&amp;#39;status&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ docker-compose run users-service python manage.py test_app
[...]
======= FAILURES ======
____ test_add_user ____
[...]
sqlalchemy.exc.ProgrammingError: (psycopg2.ProgrammingError) relation &amp;quot;users&amp;quot; does not exist&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So our app fixture knows about sql alchemy but hasn’t created the tables needed for our user model. From the &lt;a href=&#34;http://flask-sqlalchemy.pocoo.org/2.1/contexts/&#34;&gt;Flask-SQLAlchemy documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What it (init_db) does is prepare the application to work with SQLAlchemy. However that does not now bind the SQLAlchemy object to your application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s jump in an python shell and try to see how we can bind our &lt;code&gt;db&lt;/code&gt; object to our &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;$ docker exec -ti users-service bash
root@910656bc5f75:/usr/src/app# python3
&amp;gt;&amp;gt;&amp;gt; from project import create_app, db
&amp;gt;&amp;gt;&amp;gt; app = create_app()
&amp;gt;&amp;gt;&amp;gt; app
&amp;lt;Flask &amp;#39;project&amp;#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; db
&amp;lt;SQLAlchemy engine=None&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;create_app()&lt;/code&gt; gives us an app object, but the imported &lt;code&gt;db&lt;/code&gt; isn’t connected to it out-of-the-box (it has no engine). If we jump into the &lt;a href=&#34;http://flask-sqlalchemy.pocoo.org/2.1/contexts/&#34;&gt;app context&lt;/a&gt;, the engine gets populated.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; app_ctx = app.app_context()
&amp;gt;&amp;gt;&amp;gt; app_ctx.push()  # jump into the app context
&amp;gt;&amp;gt;&amp;gt; db
&amp;lt;SQLAlchemy engine=&amp;#39;postgres://postgres:postgres@users-db:5432/users_dev&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, &lt;code&gt;db&lt;/code&gt; still doesn’t have tables and running tests at this stage would keep saying that &lt;code&gt;relation users does not exist&lt;/code&gt;. That’s why we need &lt;code&gt;create_table()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; db.engine.table_names()  # Check the tables currently on the engine
[]                           # no table found
&amp;gt;&amp;gt;&amp;gt; db.create_all()          # Create the tables according to defined models
&amp;gt;&amp;gt;&amp;gt; db.engine.table_names()
[&amp;#39;users&amp;#39;]                    # Now table &amp;#39;users&amp;#39; is found&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now update our &lt;code&gt;app&lt;/code&gt; fixture:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/tests/conftest.py
import pytest
from project import create_app, db


@pytest.fixture
def app():
    app = create_app()
    app.config.from_object(&amp;#39;project.config.TestingConfig&amp;#39;)
    with app.app_context():   
        # alternative pattern to app.app_context().push()
        # all commands indented under &amp;#39;with&amp;#39; are run in the app context 
        db.create_all()
        return app&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;cleaning-database-with-drop_all&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Cleaning database with &lt;code&gt;drop_all()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Let’s check the impact of our tests on the database. Before running tests:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ docker exec -ti $(docker ps -aqf &amp;quot;name=users-db&amp;quot;) psql -U postgres

psql (9.6.3)
postgres=# \c users_dev
You are now connected to database &amp;quot;users_dev&amp;quot; as user &amp;quot;postgres&amp;quot;.
users_dev=# \dt
No relations found.
users_dev=# \c users_test
You are now connected to database &amp;quot;users_test&amp;quot; as user &amp;quot;postgres&amp;quot;.
users_test=# \dt
No relations found.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running tests:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Running pytest
$ docker-compose run users-service python manage.py test_app
[... Output of pytest ...]
========= 5 passed in 0.17 seconds =========

# Checking the database
$ docker exec -ti $(docker ps -aqf &amp;quot;name=users-db&amp;quot;) psql -U postgres

psql (9.6.3)
postgres=# \c users_dev
You are now connected to database &amp;quot;users_dev&amp;quot; as user &amp;quot;postgres&amp;quot;.
users_dev=# \dt
No relations found.
users_dev=# \c users_test
You are now connected to database &amp;quot;users_test&amp;quot; as user &amp;quot;postgres&amp;quot;.
users_test=# \dt
users_test=# \dt
         List of relations
 Schema | Name  | Type  |  Owner   
--------+-------+-------+----------
 public | users | table | postgres
(1 row)

users_test=# SELECT * FROM users;
 id | username |         email          | active |         created_at         
----+----------+------------------------+--------+----------------------------
  1 | michael  | michael@realpython.com | f      | 2017-07-04 09:23:43.34457&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that the users table was successfully created in the &lt;code&gt;users_test&lt;/code&gt; database, which we selected in &lt;code&gt;conftest.py&lt;/code&gt;. A user was also successfully inserted. However, if we run the tests again and recheck the table, we can see how trouble is starting to creep in:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Running test 
[...]

# Checking the database
[...]
users_test=# SELECT * FROM users;
 id | username |         email          | active |         created_at         
----+----------+------------------------+--------+----------------------------
  1 | michael  | michael@realpython.com | f      | 2017-07-04 09:23:43.34457
  2 | michael  | michael@realpython.com | f      | 2017-07-04 09:24:55.972571
(2 rows)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are not cleaning up the database after our tests. To do so, we need to add &lt;code&gt;drop_all()&lt;/code&gt; as a tear-down action for our app fixture (after &lt;code&gt;yield&lt;/code&gt;). This will not only empty the table rows, but also delete the table itself:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/tests/conftest.py
import pytest
from project import create_app, db


@pytest.fixture
def app():
    app = create_app()
    app.config.from_object(&amp;#39;project.config.TestingConfig&amp;#39;)
    with app.app_context():   
        db.create_all()
        yield app   # Note that we changed return for yield, see below for why
        db.drop_all()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the first time, we added a command (&lt;code&gt;db.drop_all()&lt;/code&gt;) that needed to be executed after the test using the fixture. Previously we used &lt;code&gt;return&lt;/code&gt; to get the app out of the fixture. But using &lt;code&gt;return&lt;/code&gt; means ending the function. That’s where &lt;code&gt;yield&lt;/code&gt; comes to the rescue. Unlike &lt;code&gt;unittest&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt; does not put setup and teardown code in dedicated function. Everything that comes before &lt;code&gt;return&lt;/code&gt;/&lt;code&gt;yield&lt;/code&gt; is setup code, everything that comes after &lt;code&gt;yield&lt;/code&gt; is teardown code. Documentation is &lt;a href=&#34;https://docs.pytest.org/en/latest/fixture.html#fixture-finalization-executing-teardown-code&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By using a yield statement instead of return, all the code after the yield statement serves as the teardown code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you try to run tests again, you will see that the database is left clean.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;avoid-locking-postgres-with-db.session.remove&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Avoid locking postgres with &lt;code&gt;db.session.remove()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the part I still have trouble understanding. Using the fixture above, &lt;code&gt;pytest&lt;/code&gt; started hanging indefinitely at random test (usually at tests that touched the database several times, but not always). When it happened, I could not even stop &lt;code&gt;pytest&lt;/code&gt; and had to restart the container.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;$ docker-compose run users-service python manage.py test_app
===== test session starts =====
[...]
project/tests/test_configs.py ...
project/tests/test_users.py ..

hanging... hanging... hanging...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this &lt;a href=&#34;https://stackoverflow.com/questions/26350911/what-to-do-when-a-py-test-hangs-silently&#34;&gt;SO question&lt;/a&gt;, I got the confirmation that postgres might be locked. Using &lt;a href=&#34;https://www.devopsderek.com/blog/2012/11/13/list-and-disconnect-postgresql-db-sessions/&#34;&gt;the commands listed on devopsderek.com&lt;/a&gt;, it is possible to look at the sessions active while pytest is locked. Below we can see that one is blocked with the state &lt;a href=&#34;https://stackoverflow.com/questions/51019/what-does-it-mean-when-a-postgresql-process-is-idle-in-transaction&#34;&gt;“idle in transaction”&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Checking the database while pytest is hanging
$ docker exec -ti $(docker ps -aqf &amp;quot;name=users-db&amp;quot;) psql -U postgres
postgres=# SELECT * FROM pg_stat_activity;

datid |  datname   | pid | ... | state               | ... | query
------+------------+-----+-----+---------------------+-----+-
[... lots of sessions ...]
16386 | users_test | 200 | ... | idle in transaction | ... | SELECT users.id...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Killing the session manually in postgres did also kill &lt;code&gt;pytest&lt;/code&gt; without needing to restart the container.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Still in psql
postgres=# SELECT pg_terminate_backend(200);
 pg_terminate_backend 
----------------------
 t
(1 row)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# In the terminal running pytest
psycopg2.OperationalError: terminating connection due to administrator command
server closed the connection unexpectedly
    This probably means the server terminated abnormally
    before or while processing the request.
$ # free to type again&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Still following &lt;a href=&#34;https://stackoverflow.com/questions/26350911/what-to-do-when-a-py-test-hangs-silently&#34;&gt;SO advice&lt;/a&gt;, you can explicitly close the connection after each test, which solves the issue.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/tests/conftest.py
import pytest
from project import create_app, db


@pytest.fixture
def app():
    app = create_app()
    app.config.from_object(&amp;#39;project.config.TestingConfig&amp;#39;)
    with app.app_context():   
        db.create_all()
        yield app  
        db.session.remove()  # looks like db.session.close() would work as well
        db.drop_all()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We end up very close to the &lt;a href=&#34;http://testdriven.io/part-one-test-setup/&#34;&gt;testdriven.io example&lt;/a&gt; for &lt;code&gt;unittest&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# project/tests/base.py on http://testdriven.io/part-one-test-setup/
from flask_testing import TestCase

from project import app, db


class BaseTestCase(TestCase):
    def create_app(self):  # done in our pytest fixture before yield
        app.config.from_object(&amp;#39;project.config.TestingConfig&amp;#39;)
        return app
        
    def setUp(self):  # done in our pytest fixture before yield
        db.create_all()
        db.session.commit()

    def tearDown(self): # done in our pytest fixture after yield
        db.session.remove()
        db.drop_all()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I just haven’t found the reason why &lt;code&gt;db.session.commit()&lt;/code&gt; would be necessary (although I suspect it might be an alternative to explicitely declaring the app context like we did in &lt;code&gt;with&lt;/code&gt;). I will update the post when I understand it better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Clojure for pythonista - Manipulating strings</title>
      <link>/2017/06/13/clojure-for-pythonista---manipulating-strings/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/13/clojure-for-pythonista---manipulating-strings/</guid>
      <description>&lt;div id=&#34;foreword&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Foreword&lt;/h2&gt;
&lt;p&gt;I am trying to learn clojure. This series of posts is my attempt to solve beginner exercises both in python and clojure. Exercises are inspired by the excellent Reuven Lerner’s &lt;a href=&#34;https://practicemakespython.com/&#34;&gt;Practice Makes Python&lt;/a&gt; and other sources like &lt;a href=&#34;https://learnpythonthehardway.org/&#34;&gt;Learn python the hard way&lt;/a&gt;. Before trying any exercises, you can read an excellent introduction to clojure : &lt;a href=&#34;http://www.braveclojure.com/do-things/&#34;&gt;Brave Clojure&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This exercise introduces ways to deal with strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;goal&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Goal&lt;/h2&gt;
&lt;p&gt;Create a command line script that asks the user to enter a word, sort the letters in alphabetic order and output the sentence “Your letters are: &lt;word-in-alphabetic-order&gt;”. The idea is to play both with characters sequence and string interpolation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reordering-letters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reordering letters&lt;/h2&gt;
&lt;div id=&#34;reordering-letters-in-python&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reordering letters in python&lt;/h3&gt;
&lt;p&gt;In python, strings are treated like sequences of characters, so you can iterate over them like you would do on a list. There is no character type and functions that “reclaim” character as argument (e.g &lt;code&gt;ord()&lt;/code&gt;, which gives the unicode code point) are in fact asking for &lt;a href=&#34;https://docs.python.org/3/library/functions.html#ord&#34;&gt;strings of one character&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
ord(&amp;#39;bla&amp;#39;)
&amp;gt; TypeError: ord() expected a character, but string of length 3 found&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
ord(&amp;#39;a&amp;#39;)
&amp;gt; 97
ord(&amp;#39;b&amp;#39;)
&amp;gt; 98&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When using operators like greater-than or smaller-than on characters, the unicode code points are compared (so no need to use &lt;code&gt;ord()&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
&amp;#39;a&amp;#39; &amp;lt; &amp;#39;b&amp;#39;
&amp;gt; True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although strings are iterable like lists, they don’t have all the list’s functions. For example, you cannot use &lt;code&gt;.sort()&lt;/code&gt; on a string. You would have to convert it to a list first with &lt;code&gt;list()&lt;/code&gt;. Note that &lt;code&gt;.sort()&lt;/code&gt; changes the list in place and return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
my_str = &amp;quot;bla&amp;quot;
my_str.sort()
&amp;gt; AttributeError: &amp;#39;str&amp;#39; object has no attribute &amp;#39;sort&amp;#39;

my_str = list(my_str)
my_str
&amp;gt; [&amp;#39;b&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;a&amp;#39;]
my_str.sort()
my_str
&amp;gt; [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;l&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make things simpler, python has the &lt;code&gt;sorted&lt;/code&gt; function, which work on any iterable, not just list. It also has the benefit of returning a new list rather than changing the list in-place.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
sorted(&amp;quot;bla&amp;quot;)
&amp;gt; [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;l&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more info on the difference between &lt;code&gt;.sort()&lt;/code&gt; and &lt;code&gt;sorted&lt;/code&gt;, read this &lt;a href=&#34;https://stackoverflow.com/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort-python&#34;&gt;SO thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;.sort()&lt;/code&gt; and &lt;code&gt;sorted&lt;/code&gt; return list of characters. To convert this list back to a normal string, we can use &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html?highlight=join#str.join&#34;&gt;&lt;code&gt;str.join(iterable)&lt;/code&gt;&lt;/a&gt;. Note that &lt;code&gt;str&lt;/code&gt; here refers to the separator that will be placed between each element of the iterable.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
&amp;quot;&amp;quot;.join(sorted(&amp;quot;bla&amp;quot;))
&amp;gt; &amp;#39;abl&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reordering-letters-in-clojure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reordering letters in clojure&lt;/h3&gt;
&lt;p&gt;In clojure, there is a character type, which is different than the string type. Strings (even with only one character) are delimited by double quotes. Characters have a &lt;code&gt;\&lt;/code&gt; prefix.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(= &amp;quot;a&amp;quot; &amp;quot;a&amp;quot;)
&amp;gt; true

(= \a \a)
&amp;gt; true

(= &amp;quot;a&amp;quot; \a)
&amp;gt; false

(type &amp;quot;a&amp;quot;)
&amp;gt; java.lang.String

(type \a)
&amp;gt; java.lang.Character&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Operators like greater-than or smaller-than don’t work on strings or characters.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(&amp;gt; \a &amp;quot;a&amp;quot;)
&amp;gt; java.lang.ClassCastException: 
&amp;gt; java.lang.String cannot be cast to java.lang.Number

(&amp;gt; &amp;quot;b&amp;quot; \a)
&amp;gt; java.lang.ClassCastException: 
&amp;gt; java.lang.Character cannot be cast to java.lang.Number&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the error message states, these operators need Number and neither strings nor character are automatically casted to Number. You need to use &lt;a href=&#34;https://clojuredocs.org/clojure.core/int&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; (like we did with &lt;code&gt;ord()&lt;/code&gt; in python). This coerse numbers to integer but also characters to unicode points. It does not work on strings.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(int \a)
&amp;gt; 97

(int &amp;quot;a&amp;quot;)
&amp;gt; java.lang.ClassCastException: 
&amp;gt; java.lang.String cannot be cast to java.lang.Character&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can compare characters, according to “alphabetical order” (at least unicode points).&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(&amp;lt; (int \a) (int \c))
&amp;gt; true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To convert a single-character string to a character, we would need new functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://clojuredocs.org/clojure.core/seq&#34;&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/a&gt; takes a collection and return a seq. When used on strings, it returns a seq of the letters in the string, coerced to character.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://clojuredocs.org/clojure.core/first&#34;&gt;&lt;code&gt;first&lt;/code&gt;&lt;/a&gt; returns the first item of a collection. It is useful in our case since seq will give us a single item collection, rather than just a character.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(seq &amp;quot;a&amp;quot;)
&amp;gt; (\a)
(first (seq &amp;quot;a&amp;quot;))
&amp;gt; \a
(int (first (seq &amp;quot;a&amp;quot;)))
&amp;gt; 97&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternative to &lt;code&gt;first&lt;/code&gt; would be to use &lt;a href=&#34;https://clojuredocs.org/clojure.core/apply&#34;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;, which lets you convert a collection to a list of arguments for a function. This is similar to unpacking argumets with &lt;a href=&#34;https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists&#34;&gt;&lt;code&gt;*args&lt;/code&gt; at function call in python&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(int (seq &amp;quot;a&amp;quot;))
&amp;gt; java.lang.ClassCastException: 
&amp;gt; clojure.lang.StringSeq cannot be cast to java.lang.Character

(apply int (seq &amp;quot;a&amp;quot;))
&amp;gt; 97&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fortunately, sorting the letters of a strings in alphabetical order don’t require manual comparaison of each characters. The &lt;a href=&#34;https://clojuredocs.org/clojure.core/sort&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; function does both the conversion to characters and the sorting.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(sort &amp;quot;hello&amp;quot;)
&amp;gt; (\e \h \l \l \o)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To join the characters back into a word, we can use &lt;code&gt;str&lt;/code&gt;, which concatenate strings and/or characters. &lt;code&gt;str&lt;/code&gt; expect arguments not a seq of characters, so we can use our &lt;code&gt;apply&lt;/code&gt; function again.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
;; intended use
(str \e \h \l \l \o)
&amp;gt; &amp;quot;ehllo&amp;quot;

;; wrong
(str (\e \h \l \l \o))
&amp;gt; &amp;quot;(\\e \\h \\l \\l \\o)&amp;quot;

;; workaround using apply
(apply str (\e \h \l \l \o))
&amp;gt; &amp;quot;ehllo&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternative to &lt;code&gt;str&lt;/code&gt;, closer to python’s &lt;code&gt;join&lt;/code&gt; is &lt;a href=&#34;https://clojuredocs.org/clojure.string/join&#34;&gt;&lt;code&gt;clojure.string/join&lt;/code&gt;&lt;/a&gt;. It allows to choose a separator and expects an iterable as argument (no need for &lt;code&gt;apply&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(clojure.string/join &amp;quot;&amp;quot; (sort &amp;quot;hello&amp;quot;))
&amp;gt; &amp;quot;ehllo&amp;quot;
(clojure.string/join &amp;quot;,&amp;quot; (sort &amp;quot;hello&amp;quot;))
&amp;gt; &amp;quot;e,h,l,l,o&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;string-interpolation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;String interpolation&lt;/h2&gt;
&lt;div id=&#34;string-interpolation-in-python&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;String interpolation in python&lt;/h3&gt;
&lt;p&gt;When starting out with python, it is tempting to use simple concatenate patterns to insert variable in strings.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
# Using +
alpha_string = &amp;quot;&amp;quot;.join(sorted(&amp;quot;hello&amp;quot;))
&amp;quot;Your reordered string is: &amp;quot; + alpha_string + &amp;quot;!&amp;quot;)
&amp;gt; &amp;quot;Your reordered string is: ehllo!&amp;quot;

# Using join (poor choice, note that you get a space between ehllo and !)
&amp;quot; &amp;quot;.join([&amp;quot;Your reordered string is:&amp;quot;, alpha_string, &amp;quot;!&amp;quot;])
&amp;gt; &amp;quot;Your reordered string is: ehllo !&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you can get much nicer syntax and options using string interpolation. For example, the two examples above would fail if &lt;code&gt;alpha_string&lt;/code&gt; was a number. They would not do an implicit conversion to string, like the methods below.&lt;/p&gt;
&lt;p&gt;Python 3.6 supports 3 types of interpolation: &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;.format&lt;/code&gt; and &lt;code&gt;literal string f&lt;/code&gt;. These are &lt;a href=&#34;https://zerokspot.com/weblog/2015/12/31/new-string-formatting-in-python/&#34;&gt;well&lt;/a&gt; &lt;a href=&#34;https://blog.lerner.co.il/teaching-old-dog-new-tricks-learned-love-str-format-gave/&#34;&gt;covered&lt;/a&gt; &lt;a href=&#34;https://www.python.org/dev/peps/pep-0498/&#34;&gt;online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For simple variable &lt;code&gt;literal f strings&lt;/code&gt; are definitely more readable:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
alpha_string = &amp;quot;&amp;quot;.join(sorted(&amp;quot;hello&amp;quot;))
# Using .format
&amp;quot;Your reordered string is: {}!&amp;quot;.format(alpha_string)
&amp;gt; &amp;quot;Your reordered string is: ehllo!&amp;quot;

# Using f (&amp;gt;= 3.6)
f&amp;quot;Your reordered string is: {alpha_string}!&amp;quot;
&amp;gt; &amp;quot;Your reordered string is: ehllo!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For dictionary, it is more a matter of taste, thanks to dictionary unpacking:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
user = {&amp;#39;name&amp;#39;: &amp;#39;Jane&amp;#39;, &amp;#39;city&amp;#39;: &amp;#39;Geneva&amp;#39;}
# Using .format
&amp;quot;{name} lives in {city}&amp;quot;.format(**user)
&amp;gt; &amp;quot;Jane lives in Geneva&amp;quot;

# Using f (&amp;gt;= 3.6)
f&amp;quot;{user[&amp;#39;name&amp;#39;]} lives in {user[&amp;#39;city&amp;#39;]}&amp;quot;
&amp;gt; &amp;quot;Jane lives in Geneva&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;string-interpolation-in-clojure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;String interpolation in clojure&lt;/h3&gt;
&lt;p&gt;Similar to &lt;code&gt;+&lt;/code&gt;/&lt;code&gt;join&lt;/code&gt; in python, you can do basic, not very practical, insertion of variables with &lt;code&gt;str&lt;/code&gt;/&lt;code&gt;clojure.string/join&lt;/code&gt; with clojure. Unlike python, both methods will convert number to string for you.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(def alphastring (apply str (sort &amp;quot;hello&amp;quot;)))

;; Using str
(str &amp;quot;Your reordered string is: &amp;quot; alphastring &amp;quot;!&amp;quot;)
&amp;gt; &amp;quot;Your reordered string is: ehllo!&amp;quot;

;; Using join (poor choice, note that you get a space between alphastring and &amp;quot;!&amp;quot;)
(clojure.string/join &amp;quot; &amp;quot; [&amp;quot;Your reordered string is:&amp;quot; alphastring &amp;quot;!&amp;quot;])
&amp;gt; &amp;quot;Your reordered string is: ehllo !&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interpolation can be done with &lt;a href=&#34;https://clojuredocs.org/clojure.core/format&#34;&gt;&lt;code&gt;format&lt;/code&gt;&lt;/a&gt;, a pattern similar to &lt;code&gt;%-formatting&lt;/code&gt; in python. The list of &lt;code&gt;%-characters&lt;/code&gt; &lt;a href=&#34;https://dzone.com/articles/java-string-format-examples&#34;&gt;can be found here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(def name &amp;quot;Jane&amp;quot;)
(def city &amp;quot;Geneva&amp;quot;)
(def age 33)
(format &amp;quot;%s lives in %s and is %d!&amp;quot; name city age)
&amp;gt; &amp;quot;Jane lives in Geneva and is 33!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clojure string interpolation options are well explained in &lt;a href=&#34;https://dzone.com/articles/java-string-format-examples&#34;&gt;this article&lt;/a&gt;, including a benchmark of their speed. The article ends up showcasing &lt;code&gt;core.incubator&lt;/code&gt;’s &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; macro which even lets you do string interpolation in a similar way to ruby or python’s &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Clojure for pythonista - User Input/Loop/Conditional</title>
      <link>/2017/06/08/clojure-for-pythonista---user-input/loop/conditional/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/08/clojure-for-pythonista---user-input/loop/conditional/</guid>
      <description>&lt;div id=&#34;foreword&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Foreword&lt;/h2&gt;
&lt;p&gt;I am trying to learn clojure. This series of posts is my attempt to solve beginner exercises both in python and clojure. Exercises are inspired by the excellent Reuven Lerner’s &lt;a href=&#34;https://practicemakespython.com/&#34;&gt;Practice Makes Python&lt;/a&gt; and other sources like &lt;a href=&#34;https://learnpythonthehardway.org/&#34;&gt;Learn python the hard way&lt;/a&gt;. Before trying any exercises, you can read an excellent introduction to clojure : &lt;a href=&#34;http://www.braveclojure.com/do-things/&#34;&gt;Brave Clojure&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This exercise introduces the following concepts: user-input, conditional and loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;goal&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Goal&lt;/h2&gt;
&lt;p&gt;Create a command line game where the user has to guess a number between 0 and 99. The final program should repeat the question until the user find the right number, providing a helpful “Higher!” or “Lower!” hint after each failed attempt.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-random-numbers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting random numbers&lt;/h2&gt;
&lt;div id=&#34;getting-random-numbers-in-python&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting random numbers in python&lt;/h3&gt;
&lt;p&gt;In python, random integers can be obtained from &lt;code&gt;randint&lt;/code&gt;, a function from the &lt;code&gt;random&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
import random
# Get a random number between 0 and 99
number = random.randint(0, 100)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-random-numbers-in-clojure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting random numbers in clojure&lt;/h3&gt;
&lt;p&gt;In clojure, you get random integer from the &lt;code&gt;rand-int&lt;/code&gt; function (which by default start at 0 and end at the first argument)&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(def -main []
  (rand-int 100))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-user-input&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting user input&lt;/h2&gt;
&lt;div id=&#34;getting-user-input-in-python&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting user input in python&lt;/h3&gt;
&lt;p&gt;In python, you can get user input with the &lt;code&gt;input&lt;/code&gt; function. &lt;code&gt;input&lt;/code&gt; takes a string as an argument that you can use to display a prompt to the user. To make sure that the input is converted to a integer, we wrap the &lt;code&gt;input&lt;/code&gt; call in &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
guess = int(input(&amp;quot;Enter a guess: &amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-user-input-in-clojure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting user input in clojure&lt;/h3&gt;
&lt;p&gt;In clojure, you can get user input with the &lt;a href=&#34;https://clojuredocs.org/clojure.core/read-line&#34;&gt;&lt;code&gt;read-line&lt;/code&gt;&lt;/a&gt; function. The conversion to an integer is also necessary and you can use &lt;code&gt;Integer/parseInt&lt;/code&gt; for that. &lt;code&gt;read-line&lt;/code&gt; doesn’t have prompt feature, so we will print the prompt to the console with &lt;a href=&#34;https://clojuredocs.org/clojure.core/read-line&#34;&gt;&lt;code&gt;println&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(defn -main []
  (println &amp;quot;Enter a guess:&amp;quot;)
  (let [guess (Integer/parseInt (read-line))]))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conditionals&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conditionals&lt;/h2&gt;
&lt;div id=&#34;conditionals-in-python&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conditionals in python&lt;/h3&gt;
&lt;p&gt;Now that we have a random number and a number entered by the user, we need to compare them and send the response response.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
import random
number = random.randint(0, 100)
guess = int(input(&amp;quot;Enter a guess: &amp;quot;))

if number &amp;gt; guess:
    print(&amp;quot;Too small!&amp;quot;)
elif number &amp;lt; guess:
    print(&amp;quot;Too big!&amp;quot;)
else:
    print(&amp;quot;Correct!&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conditionals-in-clojure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conditionals in clojure&lt;/h3&gt;
&lt;p&gt;In clojure, the &lt;a href=&#34;http://www.braveclojure.com/do-things/#if&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; function seems to be designed for single comparison. It works as a simple “if/else”: &lt;code&gt;(if &amp;lt;test&amp;gt; &amp;lt;do-if-true&amp;gt; &amp;lt;do-if-false&amp;gt;)&lt;/code&gt;. There is no such thing as &lt;code&gt;elif&lt;/code&gt;. However, clojure has &lt;a href=&#34;https://clojuredocs.org/clojure.core/cond&#34;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/a&gt; function, which allow for as many comparison as we like. The keyword &lt;code&gt;:else&lt;/code&gt; is just the last comparison and evaluate to &lt;code&gt;true&lt;/code&gt;, if no other comparison have been &lt;code&gt;true&lt;/code&gt; before it. We could have chosen any other truthy value (e.g &lt;code&gt;:otherwise&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(defn -main []
  (let [number (rand-int 100)]
    (println &amp;quot;Enter a guess:&amp;quot;)
    (let [guess (Integer/parseInt (read-line))]
      (cond (&amp;gt; number guess)
              (println &amp;quot;Too Low!&amp;quot;)
            (&amp;lt; number guess)
              (println &amp;quot;Too Big!&amp;quot;)
            :else
              (println &amp;quot;Yeah!&amp;quot;)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;loop-to-repeat-the-question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loop to repeat the question&lt;/h2&gt;
&lt;div id=&#34;loop-to-repeat-the-question-in-python&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loop to repeat the question in python&lt;/h3&gt;
&lt;p&gt;Lastly, we need to make the program able to repeat the question when the answer is wrong.&lt;/p&gt;
&lt;p&gt;In python, never-ending loop are often implemented with &lt;code&gt;while True&lt;/code&gt;, using the &lt;code&gt;break&lt;/code&gt; keyword to exit on specific conditions.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# python
import random
number = random.randint(0, 100)

while True:
    guess = int(input(&amp;quot;Enter a guess: &amp;quot;))
    if number &amp;gt; guess:
        print(&amp;quot;Too small!&amp;quot;)
    elif number &amp;lt; guess:
        print(&amp;quot;Too big!&amp;quot;)
    else:
        print(&amp;quot;Correct!&amp;quot;)
        break&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loop-to-repeat-the-question-in-clojure&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loop to repeat the question in clojure&lt;/h3&gt;
&lt;p&gt;In clojure, you can take the opposite approach. Rather than saying “when to exit” (&lt;code&gt;break&lt;/code&gt;), we can use the &lt;a href=&#34;http://www.braveclojure.com/do-things/#loop&#34;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/a&gt; function and tell it “when to loop” (&lt;code&gt;recur&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(defn -main []
  (let [number (rand-int 100)]
    (loop []
      (println &amp;quot;Enter a guess:&amp;quot;)
      (let [guess (Integer/parseInt (read-line))]
        (cond (&amp;gt; number guess)
                (do (println &amp;quot;Too Low!&amp;quot;)
                    (recur))
              (&amp;lt; number guess)
                (do (println &amp;quot;Too Big!&amp;quot;)
                    (recur))
              :else
                (println &amp;quot;Yeah!&amp;quot;))))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we had to wrap the “actions” following each &lt;code&gt;cond&lt;/code&gt;’s conditions with the &lt;a href=&#34;http://www.braveclojure.com/do-things/#do&#34;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt; function, a simple way to group multiple statements into one. Otherwise, the first call to &lt;code&gt;(recur)&lt;/code&gt; (after “Too Low!”) would be interpreted as the second condition for &lt;code&gt;cond&lt;/code&gt; (instead of &lt;code&gt;(&amp;lt; number guess)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Alternatively, you could use a recursive function. I haven’t been able to find if for such a short problem one method is better than the other, but this is a good illustration of a program with two functions.&lt;/p&gt;
&lt;pre class=&#34;clojure&#34;&gt;&lt;code&gt;;; clojure
(defn try-and-guess [number]
  (println &amp;quot;Enter your guess:&amp;quot;)
  (let [guess (Integer/parseInt (read-line))]
    (cond
      (&amp;lt; guess number) 
        (do (println &amp;quot;Guess is too small...&amp;quot;)
            (try-and-guess number))
      (&amp;gt; guess number)
        (do (println &amp;quot;Guess is too big...&amp;quot;)
            (try-and-guess number))
      :else
      (println &amp;quot;Yeah!&amp;quot;))))

(defn -main []
  (let [number (rand-int 100)]
    (try-and-guess number)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A minimal emacs setup with orgmode</title>
      <link>/2017/05/29/a-minimal-emacs-setup-with-orgmode/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/29/a-minimal-emacs-setup-with-orgmode/</guid>
      <description>&lt;div id=&#34;foreword&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Foreword&lt;/h2&gt;
&lt;p&gt;Trying to start using emacs can be a bit intimidating. Very rough looking outside the box, complex keyboard shortcuts, configuration in emacs-elisp language… I personally decided to try the switch (from vim) for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;once configured well, emacs can rival in features with many of IDE. &lt;a href=&#34;https://elpy.readthedocs.io/&#34;&gt;Elpy&lt;/a&gt; looks great for python and &lt;a href=&#34;https://cider.readthedocs.io/&#34;&gt;CIDER&lt;/a&gt; looks amazing for clojure.&lt;/li&gt;
&lt;li&gt;with EVIL mode, you can use VIM key-bindings in emacs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://orgmode.org/&#34;&gt;org-mode&lt;/a&gt; lets you do things you wouldn’t believe possible with plain text&lt;/li&gt;
&lt;li&gt;emacs can &lt;a href=&#34;https://github.com/hlissner/.emacs.d&#34;&gt;look good&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are well explained stories of vim users migrating to emacs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JWD1Fpdd4Pc&#34;&gt;Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/&#34;&gt;From Vim to Emacs+Evil chaotic migration guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But before implementing advanced features, you might want to put in place a setup that lets you start with the bare minimum (i.e vim key-bindings and an &lt;em&gt;easy&lt;/em&gt; to customize config file). Emacs is configured with a programming language called emacs-lisp. For people not knowing emacs-lisp at all, it makes sense to use &lt;a href=&#34;https://en.wikipedia.org/wiki/Literate_programming&#34;&gt;literate programming&lt;/a&gt; and &lt;a href=&#34;http://orgmode.org/worg/org-contrib/babel/&#34;&gt;org-babel&lt;/a&gt;, a technique that lets you heavily document your code. Literate programming isn’t a paradigm that necessarily work well to write entire programs with. But for config files in unknown programming languages, it’s great. Literate programming is often used for analysis and if you are coming from python or R, this is similar to what you do in &lt;a href=&#34;http://jupyter.org/&#34;&gt;jupyter&lt;/a&gt; or &lt;a href=&#34;http://rmarkdown.rstudio.com/r_notebooks.html&#34;&gt;r notebooks&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-emacs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Install emacs&lt;/h2&gt;
&lt;p&gt;First you need to install emacs. You can start &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;here&lt;/a&gt; or from any of the hundred of tutorials online. At the time of this post, version 25.2 is out and that is the one I am using.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;set-up-org-babel-config-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set up org-babel config file&lt;/h2&gt;
&lt;p&gt;Depending on how you installed emacs, you might have a &lt;code&gt;.emacs&lt;/code&gt; file in you home directory &lt;code&gt;~&lt;/code&gt;. This is similar to &lt;code&gt;.vimrc&lt;/code&gt; file for vim and usually contains config commands that are loaded at start up.&lt;/p&gt;
&lt;p&gt;However, from the &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;doc&lt;/a&gt;, we can see that there are other options to load your config:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When Emacs is started, it normally tries to load a Lisp program from an initialization file, or init file for short. This file, if it exists, specifies how to initialize Emacs for you. Emacs looks for your init file using the filenames ~/.emacs, ~/.emacs.el, or ~/.emacs.d/init.el; you can choose to use any one of these three names (see Find Init). Here, ~/ stands for your home directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our case, we want to use &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; instead of &lt;code&gt;~/.emacs&lt;/code&gt; and use it exclusively to setup package management and load an org-babel config file (&lt;code&gt;~/.emacs.d/emacs-config.org&lt;/code&gt;). The difference in extension is important. &lt;code&gt;.el&lt;/code&gt; files are written in emacs-lisp, the programming language powering emacs. &lt;code&gt;.org&lt;/code&gt; files are org-mode files, basically plain text file that can mix code and text.&lt;/p&gt;
&lt;p&gt;Note that if you are using windows, the &lt;code&gt;~&lt;/code&gt; directory might be &lt;code&gt;C:\Users\&amp;lt;user-name&amp;gt;\AppData\Roaming&lt;/code&gt; or even something else. There are hints &lt;a href=&#34;https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Delete file &lt;code&gt;~/.emacs&lt;/code&gt; if you have one&lt;/li&gt;
&lt;li&gt;Create dir &lt;code&gt;~/.emacs.d/&lt;/code&gt; if you don’t have one&lt;/li&gt;
&lt;li&gt;Create file &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; if you don’t have one&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;, we need only to do a few things:
&lt;ul&gt;
&lt;li&gt;setup emacs so that it can download packages from the &lt;a href=&#34;http://melpa.milkbox.net/&#34;&gt;MELPA package server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;install the &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt; package which simplify package management (all other package will be installed in &lt;code&gt;emacs-config.org&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;load the &lt;code&gt;org&lt;/code&gt; package and use the &lt;code&gt;org-babel-load-file&lt;/code&gt; function to load the code inside &lt;code&gt;~/.emacs.d/emacs-config.org&lt;/code&gt; at emacs start up.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; (lines starting with &lt;code&gt;;;&lt;/code&gt; are comments):&lt;/p&gt;
&lt;pre class=&#34;emacslisp&#34;&gt;&lt;code&gt;;; add MELPA package server
(require &amp;#39;package)

(add-to-list &amp;#39;package-archives 
  &amp;#39;(&amp;quot;melpa&amp;quot; . &amp;quot;http://melpa.milkbox.net/packages/&amp;quot;))

(unless package-archive-contents
  (package-refresh-contents))

(package-initialize)

;; if not yet installed, install package use-package
(unless (package-installed-p &amp;#39;use-package)
  (package-install &amp;#39;use-package))

;; load org package and our emacs-config.org file
(require &amp;#39;org)
(org-babel-load-file &amp;quot;~/.emacs.d/emacs-config.org&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Lastly, create file &lt;code&gt;~/.emacs.d/emacs-config.org&lt;/code&gt;, which will host the bulk of our config and the explanations. Lines starting with &lt;code&gt;#+&lt;/code&gt; are org-mode document metadata. Lines starting with &lt;code&gt;*&lt;/code&gt; are content headers (number of asterisks representing the header level). Code block are wrapped between &lt;code&gt;#+BEGIN_SRC emacs-lisp&lt;/code&gt; and &lt;code&gt;#+END_SRC&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In &lt;code&gt;~/.emacs.d/emacs-config.org&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;orgmode&#34;&gt;&lt;code&gt;#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* Remove startup welcome screen
The code block below toggle off the welcome startup screen.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
  &amp;#39;(inhibit-startup-screen t))
#+END_SRC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we can now document the code not only with comment but with &lt;a href=&#34;http://orgmode.org/guide/Headlines.html#Headlines&#34;&gt;hierarchical headers&lt;/a&gt;, &lt;a href=&#34;http://orgmode.org/guide/Plain-lists.html#Plain-lists&#34;&gt;lists&lt;/a&gt;, &lt;a href=&#34;http://orgmode.org/guide/Tables.html#Tables&#34;&gt;tables&lt;/a&gt;, &lt;a href=&#34;http://orgmode.org/guide/External-links.html#External-links&#34;&gt;links&lt;/a&gt; and &lt;a href=&#34;http://orgmode.org/guide/&#34;&gt;all the other things&lt;/a&gt; offered by org-mode.&lt;/p&gt;
&lt;p&gt;If you are trying to do this step by step and run emacs every time, you might notice that emacs will complain if you use &lt;code&gt;(org-babel-load-file &amp;lt;path&amp;gt;)&lt;/code&gt; in &lt;code&gt;init.el&lt;/code&gt; on a non existing or empty file. This should go away as soon as you have at least one valid code block in your &lt;code&gt;emacs-config.org&lt;/code&gt;. Above we removed the welcome screen displayed by default at emacs launch.&lt;/p&gt;
&lt;p&gt;You will notice that on first run, emacs create a &lt;code&gt;~/.emacs.d/emacs-config.el&lt;/code&gt; file that contains only the code that we wrapped in code blocks in our &lt;code&gt;emacs-config.org&lt;/code&gt;. This file will be updated each time you change your &lt;code&gt;emacs-config.org&lt;/code&gt; file and restart emacs.&lt;/p&gt;
&lt;p&gt;You might also notice that on first run, emacs will append some lines to our &lt;code&gt;init.el&lt;/code&gt; file. Something like:&lt;/p&gt;
&lt;pre class=&#34;emacslisp&#34;&gt;&lt;code&gt;(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won&amp;#39;t work right.
 &amp;#39;(inhibit-startup-screen t)
 &amp;#39;(package-selected-packages (quote (use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won&amp;#39;t work right.
 )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These lines should not be touched.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-vim-key-bindings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Adding Vim key-bindings&lt;/h2&gt;
&lt;p&gt;From now on, we can add the rest of our config in &lt;code&gt;emacs-config.org&lt;/code&gt;. We will enable vim keybindings by installing our first package via &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;&lt;code&gt;use-package&lt;/code&gt;&lt;/a&gt;, called &lt;code&gt;EVIL&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some reasons to use &lt;code&gt;use-package&lt;/code&gt; for your package management and config:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can wrap together in the same function the install, enabling and config of each package. This keeps things neatly organized.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;:ensure&lt;/code&gt; keyword, when set to true (&lt;code&gt;t&lt;/code&gt;), will install the package if it’s not installed yet.&lt;/li&gt;
&lt;li&gt;it’s easy to install/load packages depending on the operating system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Append the following lines to &lt;code&gt;~/.emacs.d/emacs-config.org&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;orgmode&#34;&gt;&lt;code&gt;* EVIL
** Install
Install EVIL (if not yet installed), and enable it.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1))
#+END_SRC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart EMACS. On my machine, I often get error when I start EMACS with new packages. Closing it once and restarting a second time usually works well.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1705091-scrsh-emacs-error.png&#34; alt=&#34;The type of error I get on first start with new package&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;The type of error I get on first start with new package&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After your second restart, you should be all set to start using emacs.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Create Swiss cantons cartogram with ggplot2</title>
      <link>/2017/05/08/create-swiss-cantons-cartogram-with-ggplot2/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/08/create-swiss-cantons-cartogram-with-ggplot2/</guid>
      <description>&lt;script src=&#34;../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../rmarkdown-libs/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;../rmarkdown-libs/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../rmarkdown-libs/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;While reading &lt;a href=&#34;www.rweekly.org&#34;&gt;rweekly&lt;/a&gt; past issues, I stumbbled upon a post from &lt;a href=&#34;http://maxhumber.com/2017/02/15/tile_canada.html&#34;&gt;Max Humber&lt;/a&gt;, explaining how he tried to design a tile grid map / state cartogram for Canada. I had never seen such design and thought that it would be a great fit for Swiss cantons. While browsing the excellent repositories of &lt;a href=&#34;https://github.com/hrbrmstr&#34;&gt;Bob Rudis&lt;/a&gt;, I realised that he had written &lt;a href=&#34;https://github.com/hrbrmstr/statebins&#34;&gt;statebin&lt;/a&gt;, a ggplot extension to easily create US state cartogram. This post is my attempt to convert his code to handle Swiss cantons.&lt;/p&gt;
&lt;p&gt;In hrbrmstr library, US states are on a 8x12 grid.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1705081-cantonbins-scrsh-hrbrmstr-statesbin.png&#34; alt=&#34;US States mapped with statebins. Source: https://github.com/hrbrmstr/statebins&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;US States mapped with statebins. Source: &lt;a href=&#34;https://github.com/hrbrmstr/statebins&#34; class=&#34;uri&#34;&gt;https://github.com/hrbrmstr/statebins&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;These coordinates are saved with the full and abbreviated names in a dataframe. The &lt;code&gt;L&lt;/code&gt; suffix after the numbers is a &lt;a href=&#34;http://stackoverflow.com/questions/24350733/why-would-r-use-the-l-suffix-to-denote-an-integer&#34;&gt;way to specify integer&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Original code from hrbrmstr
# source: https://github.com/hrbrmstr/statebins/blob/master/R/statebins.R
state_coords &amp;lt;- structure(
  list(abbrev = c(&amp;quot;AL&amp;quot;, &amp;quot;AK&amp;quot;, &amp;quot;AZ&amp;quot;, &amp;quot;AR&amp;quot;, &amp;quot;CA&amp;quot;, &amp;quot;CO&amp;quot;,
                  &amp;quot;CT&amp;quot;, &amp;quot;DC&amp;quot;, &amp;quot;DE&amp;quot;, &amp;quot;FL&amp;quot;, &amp;quot;GA&amp;quot;, &amp;quot;HI&amp;quot;,
                  &amp;quot;ID&amp;quot;, &amp;quot;IL&amp;quot;, &amp;quot;IN&amp;quot;, &amp;quot;IA&amp;quot;, &amp;quot;KS&amp;quot;, &amp;quot;KY&amp;quot;, 
                  &amp;quot;LA&amp;quot;, &amp;quot;ME&amp;quot;, &amp;quot;MD&amp;quot;, &amp;quot;MA&amp;quot;, &amp;quot;MI&amp;quot;, &amp;quot;MN&amp;quot;,
                  &amp;quot;MS&amp;quot;, &amp;quot;MO&amp;quot;, &amp;quot;MT&amp;quot;, &amp;quot;NE&amp;quot;, &amp;quot;NV&amp;quot;, &amp;quot;NH&amp;quot;, 
                  &amp;quot;NJ&amp;quot;, &amp;quot;NM&amp;quot;, &amp;quot;NY&amp;quot;, &amp;quot;NC&amp;quot;, &amp;quot;ND&amp;quot;, &amp;quot;OH&amp;quot;, 
                  &amp;quot;OK&amp;quot;, &amp;quot;OR&amp;quot;, &amp;quot;PA&amp;quot;, &amp;quot;RI&amp;quot;, &amp;quot;SC&amp;quot;, &amp;quot;SD&amp;quot;, 
                  &amp;quot;TN&amp;quot;, &amp;quot;TX&amp;quot;, &amp;quot;UT&amp;quot;, &amp;quot;VT&amp;quot;, &amp;quot;VA&amp;quot;, &amp;quot;WA&amp;quot;, 
                  &amp;quot;WV&amp;quot;, &amp;quot;WI&amp;quot;, &amp;quot;WY&amp;quot;, &amp;quot;PR&amp;quot;),
       it = c(&amp;quot;Alabama&amp;quot;, &amp;quot;Alaska&amp;quot;, &amp;quot;Arizona&amp;quot;, &amp;quot;Arkansas&amp;quot;,
              &amp;quot;California&amp;quot;, &amp;quot;Colorado&amp;quot;, &amp;quot;Connecticut&amp;quot;, 
              &amp;quot;District of Columbia&amp;quot;, &amp;quot;Delaware&amp;quot;, &amp;quot;Florida&amp;quot;, 
              &amp;quot;Georgia&amp;quot;, &amp;quot;Hawaii&amp;quot;, &amp;quot;Idaho&amp;quot;, &amp;quot;Illinois&amp;quot;, 
              &amp;quot;Indiana&amp;quot;, &amp;quot;Iowa&amp;quot;, &amp;quot;Kansas&amp;quot;, &amp;quot;Kentucky&amp;quot;, 
              &amp;quot;Louisiana&amp;quot;, &amp;quot;Maine&amp;quot;, &amp;quot;Maryland&amp;quot;, 
              &amp;quot;Massachusetts&amp;quot;, &amp;quot;Michigan&amp;quot;, &amp;quot;Minnesota&amp;quot;, 
              &amp;quot;Mississippi&amp;quot;, &amp;quot;Missouri&amp;quot;, &amp;quot;Montana&amp;quot;, 
              &amp;quot;Nebraska&amp;quot;, &amp;quot;Nevada&amp;quot;, &amp;quot;New Hampshire&amp;quot;,
              &amp;quot;New Jersey&amp;quot;, &amp;quot;New Mexico&amp;quot;, &amp;quot;New York&amp;quot;,
              &amp;quot;North Carolina&amp;quot;, &amp;quot;North Dakota&amp;quot;, &amp;quot;Ohio&amp;quot;,
              &amp;quot;Oklahoma&amp;quot;, &amp;quot;Oregon&amp;quot;, &amp;quot;Pennsylvania&amp;quot;,
              &amp;quot;Rhode Island&amp;quot;, &amp;quot;South Carolina&amp;quot;,
              &amp;quot;South Dakota&amp;quot;, &amp;quot;Tennessee&amp;quot;, &amp;quot;Texas&amp;quot;, &amp;quot;Utah&amp;quot;,
              &amp;quot;Vermont&amp;quot;, &amp;quot;Virginia&amp;quot;, &amp;quot;Washington&amp;quot;,
              &amp;quot;West Virginia&amp;quot;, &amp;quot;Wisconsin&amp;quot;, &amp;quot;Wyoming&amp;quot;,
              &amp;quot;Puerto Rico&amp;quot;),
       col = c(8L, 1L, 3L, 6L, 2L, 4L, 11L, 10L, 11L, 10L,
               9L, 1L, 3L, 7L, 7L, 6L, 5L, 7L, 6L, 12L,
               10L, 11L, 8L, 6L, 7L, 6L, 4L, 5L, 3L, 12L,
               10L, 4L, 10L, 8L, 5L, 8L, 5L, 2L, 9L, 12L,
               9L, 5L, 7L, 5L, 3L, 11L, 9L, 2L, 8L, 7L, 4L, 12L),
       row = c(7L, 7L, 6L, 6L, 5L, 5L, 4L, 6L, 5L, 8L, 7L,
               8L, 3L, 3L, 4L, 4L, 6L, 5L, 7L, 1L, 5L, 3L,
               3L, 3L, 7L, 5L, 3L, 5L, 4L, 2L, 4L, 6L, 3L, 
               6L, 3L, 4L, 7L, 4L, 4L, 4L, 6L, 4L, 6L, 8L,
               5L, 2L, 5L, 3L, 5L, 2L, 4L, 8L)),
  .Names = c(&amp;quot;abbrev&amp;quot;, &amp;quot;state&amp;quot;, &amp;quot;col&amp;quot;, &amp;quot;row&amp;quot;),
  class = &amp;quot;data.frame&amp;quot;, 
  row.names = c(NA, -52L)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To sketch the mockup of your tile grid, excel can come to rescue.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1705081-cantonbins-scrsh-excel.png&#34; alt=&#34;Mock up of Swiss tile grid&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Mock up of Swiss tile grid&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This shows that cantons could be represented on a 5x9 grid.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1705081-cantonbins-scrsh-excel-2.png&#34; alt=&#34;Columns/Rows reference for 5x9 grid&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Columns/Rows reference for 5x9 grid&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;By using the row/column reference of each canton, we can translate this mock up into an object mimicing hrbrmstr data structure (adding the names in each national languages).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;canton_coords &amp;lt;- structure(
  list(abbrev = c(&amp;quot;AG&amp;quot;, &amp;quot;AI&amp;quot;, &amp;quot;AR&amp;quot;, &amp;quot;BE&amp;quot;, &amp;quot;BL&amp;quot;, &amp;quot;BS&amp;quot;, &amp;quot;FR&amp;quot;,
                  &amp;quot;GE&amp;quot;, &amp;quot;GL&amp;quot;, &amp;quot;GR&amp;quot;, &amp;quot;JU&amp;quot;, &amp;quot;LU&amp;quot;, &amp;quot;NE&amp;quot;, &amp;quot;NW&amp;quot;,
                  &amp;quot;OW&amp;quot;, &amp;quot;SG&amp;quot;, &amp;quot;SH&amp;quot;, &amp;quot;SO&amp;quot;, &amp;quot;SZ&amp;quot;, &amp;quot;TG&amp;quot;, &amp;quot;TI&amp;quot;,
                  &amp;quot;UR&amp;quot;, &amp;quot;VD&amp;quot;, &amp;quot;VS&amp;quot;, &amp;quot;ZG&amp;quot;, &amp;quot;ZH&amp;quot;),
       fr_name = c(&amp;quot;Argovie&amp;quot;, &amp;quot;Appenzell Rhodes-Intérieures&amp;quot;,
                   &amp;quot;Appenzell Rhodes-Extérieures&amp;quot;, &amp;quot;Berne&amp;quot;,
                   &amp;quot;Bâle-Campagne&amp;quot;, &amp;quot;Bâle-Ville&amp;quot;, &amp;quot;Fribourg&amp;quot;,
                   &amp;quot;Genève&amp;quot;, &amp;quot;Glaris&amp;quot;, &amp;quot;Grisons&amp;quot;, &amp;quot;Jura&amp;quot;,
                   &amp;quot;Lucerne&amp;quot;, &amp;quot;Neuchâtel&amp;quot;, &amp;quot;Nidwald&amp;quot;, &amp;quot;Obwald&amp;quot;,
                   &amp;quot;Saint-Gall&amp;quot;, &amp;quot;Schaffhouse&amp;quot;, &amp;quot;Soleure&amp;quot;, &amp;quot;Schwytz&amp;quot;,
                   &amp;quot;Thurgovie&amp;quot;, &amp;quot;Tessin&amp;quot;, &amp;quot;Uri&amp;quot;, &amp;quot;Vaud&amp;quot;,
                   &amp;quot;Valais&amp;quot;, &amp;quot;Zoug&amp;quot;, &amp;quot;Zurich&amp;quot;),
       de_name = c(&amp;quot;Aargau&amp;quot;, &amp;quot;Appenzell Innerrhoden&amp;quot;,
                   &amp;quot;Appenzell Ausserrhoden&amp;quot;, &amp;quot;Bern&amp;quot;, 
                   &amp;quot;Basel-Landschaft&amp;quot;, &amp;quot;Basel-Stadt&amp;quot;,
                   &amp;quot;Freiburg&amp;quot;, &amp;quot;Genf&amp;quot;, &amp;quot;Glarus&amp;quot;,
                   &amp;quot;Graubünden&amp;quot;, &amp;quot;Jura&amp;quot;, &amp;quot;Luzern&amp;quot;,
                   &amp;quot;Neuenburg&amp;quot;, &amp;quot;Nidwalden&amp;quot;, &amp;quot;Obwalden&amp;quot;,
                   &amp;quot;St. Gallen&amp;quot;, &amp;quot;Schaffhausen&amp;quot;, &amp;quot;Solothurn&amp;quot;,
                   &amp;quot;Schwyz&amp;quot;, &amp;quot;Thurgau&amp;quot;, &amp;quot;Tessin&amp;quot;, &amp;quot;Uri&amp;quot;,
                   &amp;quot;Waadt&amp;quot;, &amp;quot;Wallis&amp;quot;, &amp;quot;Zug&amp;quot;, &amp;quot;Zürich&amp;quot;),
       it_name = c(&amp;quot;Argovia&amp;quot;, &amp;quot;Appenzello Interno&amp;quot;,
                   &amp;quot;Appenzello Esterno&amp;quot;, &amp;quot;Berna&amp;quot;,
                   &amp;quot;Basilea Campagna&amp;quot;, &amp;quot;Basilea Città&amp;quot;,
                   &amp;quot;Friburgo&amp;quot;, &amp;quot;Ginevra&amp;quot;, &amp;quot;Glarona&amp;quot;,
                   &amp;quot;Grigioni&amp;quot;, &amp;quot;Giura&amp;quot;, &amp;quot;Lucerna&amp;quot;, &amp;quot;Neuchâtel&amp;quot;,
                   &amp;quot;Nidvaldo&amp;quot;, &amp;quot;Obvaldo&amp;quot;, &amp;quot;San Gallo&amp;quot;,
                   &amp;quot;Sciaffusa&amp;quot;, &amp;quot;Soletta&amp;quot;, &amp;quot;Svitto&amp;quot;, &amp;quot;Turgovia&amp;quot;,
                   &amp;quot;Ticino&amp;quot;, &amp;quot;Uri&amp;quot;, &amp;quot;Vaud&amp;quot;, &amp;quot;Vallese&amp;quot;,
                   &amp;quot;Zugo&amp;quot;, &amp;quot;Zurigo&amp;quot;), 
       ru_name = c(&amp;quot;Argovia&amp;quot;, &amp;quot;Appenzell Dadens&amp;quot;,
                   &amp;quot;Appenzell Dadora&amp;quot;, &amp;quot;Berna&amp;quot;,
                   &amp;quot;Basilea-Champagna&amp;quot;, &amp;quot;Basilea-Citad&amp;quot;,
                   &amp;quot;Friburg&amp;quot;, &amp;quot;Genevra&amp;quot;, &amp;quot;Glaruna&amp;quot;,
                   &amp;quot;Grischun&amp;quot;, &amp;quot;Giura&amp;quot;, &amp;quot;Lucerna&amp;quot;, &amp;quot;Neuchâtel&amp;quot;,
                   &amp;quot;Sutsilvania&amp;quot;, &amp;quot;Sursilvania&amp;quot;, &amp;quot;Son Gagl&amp;quot;,
                   &amp;quot;Schaffusa&amp;quot;, &amp;quot;Soloturn&amp;quot;, &amp;quot;Sviz&amp;quot;, &amp;quot;Turgovia&amp;quot;,
                   &amp;quot;Tessin&amp;quot;, &amp;quot;Uri&amp;quot;, &amp;quot;Vad&amp;quot;, &amp;quot;Vallais&amp;quot;,
                   &amp;quot;Zug&amp;quot;, &amp;quot;Turitg&amp;quot;),
       col = c(5L,8L,8L,4L,4L,4L,3L,1L,8L,9L,3L,5L,3L,
               6L,5L,7L,6L,4L,7L,7L,7L,7L,2L,4L,6L,6L),
       row = c(2L,3L,2L,4L,2L,1L,4L,5L,4L,4L,2L,3L,3L,
               4L,4L,2L,1L,3L,3L,1L,5L,4L,4L,5L,3L,2L)),
  .Names = c(&amp;quot;abbrev&amp;quot;, &amp;quot;fr_name&amp;quot;, &amp;quot;de_name&amp;quot;,
             &amp;quot;it_name&amp;quot;, &amp;quot;ru_name&amp;quot;, &amp;quot;col&amp;quot;, &amp;quot;row&amp;quot;),
  class = &amp;quot;data.frame&amp;quot;,
  row.names = c(NA, -26L)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the same data structure as the one designed for &lt;a href=&#34;https://github.com/hrbrmstr/statebins&#34;&gt;statebin&lt;/a&gt;, it is easy to reuse the same ggplot code and only apply slight modifications (like a theme from the same &lt;a href=&#34;https://github.com/hrbrmstr/hrbrthemes&#34;&gt;hrbrmstr&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(ggplot2))
suppressMessages(library(RColorBrewer))
suppressMessages(library(hrbrthemes))

cantonbins &amp;lt;- function(canton_data, canton_col=&amp;quot;abbrev&amp;quot;, value_col=&amp;quot;value&amp;quot;,
                     text_color=&amp;quot;black&amp;quot;, font_size=3,
                     canton_border_col=&amp;quot;white&amp;quot;, labels=1:5,
                     brewer_pal=&amp;quot;PuBu&amp;quot;, plot_title=&amp;quot;&amp;quot;,
                     plot_subtitle=&amp;quot;&amp;quot;, plot_caption=&amp;quot;&amp;quot;) {

  # Reformat canton_data into a data frame without factors
  # and merge with canton_coords on abbrev key
  canton_data &amp;lt;- data.frame(canton_data, stringsAsFactors=FALSE)
  merge.x &amp;lt;- &amp;quot;abbrev&amp;quot;
  ct.dat &amp;lt;- merge(canton_coords, canton_data,
                  by.x=merge.x, by.y=canton_col, all.y=TRUE)

  # Create tile plot
  gg &amp;lt;- ggplot(ct.dat, aes_string(x=&amp;quot;col&amp;quot;, y=&amp;quot;row&amp;quot;, label=&amp;quot;abbrev&amp;quot;))
  gg &amp;lt;- gg + geom_tile(aes_string(fill=value_col))
  gg &amp;lt;- gg + geom_tile(color=canton_border_col, aes_string(fill=value_col),
                       size=2, show.legend =FALSE)
  gg &amp;lt;- gg + geom_text(color=text_color, size=font_size)
  
  # Add title
  gg &amp;lt;- gg + labs(title=plot_title, subtitle=plot_subtitle,
                  caption=plot_caption)
  
  # Set scales and coordinates system
  gg &amp;lt;- gg + scale_y_reverse()
  gg &amp;lt;- gg + scale_fill_gradientn(colours = brewer.pal(6, brewer_pal))
  gg &amp;lt;- gg + coord_equal()
  
  # Set minimal theme and remove axis titles, border, grid, 
  # background, axis ticks and axis text
  gg &amp;lt;- gg + theme_ipsum_rc()
  gg &amp;lt;- gg + labs(x=NULL, y=NULL)
  gg &amp;lt;- gg + theme(panel.border=element_blank())
  gg &amp;lt;- gg + theme(panel.grid=element_blank())
  gg &amp;lt;- gg + theme(panel.background=element_blank())
  gg &amp;lt;- gg + theme(axis.ticks=element_blank())
  gg &amp;lt;- gg + theme(axis.text=element_blank())

  return(gg)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test the function, let’s scrape a table from wikipedia containing the population per cantons. By inspecting the wikipedia code, you can see that the table has the &lt;code&gt;class&lt;/code&gt;: &lt;code&gt;wikitable&lt;/code&gt;. It can be extracted (with the help of &lt;code&gt;rvest&lt;/code&gt;) and converted into a usable dataframe (using &lt;code&gt;dplyr&lt;/code&gt;). The only modification are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;renaming the &lt;code&gt;Population[Note 2]&lt;/code&gt; column to something simpler&lt;/li&gt;
&lt;li&gt;converting the numbers stored as strings to numeric after removing their thousands “,”&lt;/li&gt;
&lt;li&gt;remove the total row for Switzerland (&lt;code&gt;Code != &amp;quot;CH&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;selecting the columns of interest&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(rvest))
suppressMessages(library(dplyr))
suppressMessages(library(stringr))
suppressMessages(library(DT))

url &amp;lt;- &amp;quot;https://en.wikipedia.org/wiki/Cantons_of_Switzerland&amp;quot;
density &amp;lt;- url %&amp;gt;%
  read_html() %&amp;gt;%
  html_node(xpath=&amp;#39;//table[contains(@class,&amp;quot;wikitable&amp;quot;)]&amp;#39;) %&amp;gt;%
  html_table() %&amp;gt;%
  rename(Population=`Population[Note 2]`) %&amp;gt;%
  mutate(Population=as.numeric(stringr::str_replace_all(Population, &amp;quot;,&amp;quot;, &amp;quot;&amp;quot;))) %&amp;gt;%
  filter(Code != &amp;quot;CH&amp;quot;) %&amp;gt;%
  select(Code, Canton, Population)

DT::datatable(
  density,
  options = list(pageLength = 5, dom = &amp;#39;tpi&amp;#39;),
  rownames = FALSE,
  caption = &amp;quot;Table 1 : Subset of wikipedia data for cantons.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;caption&#34;:&#34;&lt;caption&gt;Table 1 : Subset of wikipedia data for cantons.&lt;\/caption&gt;&#34;,&#34;data&#34;:[[&#34;ZH&#34;,&#34;BE&#34;,&#34;LU&#34;,&#34;UR&#34;,&#34;SZ&#34;,&#34;OW&#34;,&#34;NW&#34;,&#34;GL&#34;,&#34;ZG&#34;,&#34;FR&#34;,&#34;SO&#34;,&#34;BS&#34;,&#34;BL&#34;,&#34;SH&#34;,&#34;AR&#34;,&#34;AI&#34;,&#34;SG&#34;,&#34;GR&#34;,&#34;AG&#34;,&#34;TG&#34;,&#34;TI&#34;,&#34;VD&#34;,&#34;VS&#34;,&#34;NE&#34;,&#34;GE&#34;,&#34;JU&#34;],[&#34;Zürich&#34;,&#34;Bern&#34;,&#34;Luzern&#34;,&#34;Uri&#34;,&#34;Schwyz&#34;,&#34;Obwalden&#34;,&#34;Nidwalden&#34;,&#34;Glarus&#34;,&#34;Zug&#34;,&#34;Fribourg&#34;,&#34;Solothurn&#34;,&#34;Basel-Stadt&#34;,&#34;Basel-Landschaft&#34;,&#34;Schaffhausen&#34;,&#34;Appenzell Ausserrhoden&#34;,&#34;Appenzell Innerrhoden&#34;,&#34;St. Gallen&#34;,&#34;Graubünden&#34;,&#34;Aargau&#34;,&#34;Thurgau&#34;,&#34;Ticino&#34;,&#34;Vaud&#34;,&#34;Valais&#34;,&#34;Neuchâtel&#34;,&#34;Geneva&#34;,&#34;Jura&#34;],[1463459,1017483,398762,35973,154093,37076,42420,40028,122134,307461,266418,198290,285094,79836,54543,15974,499065,196610,653675,267429,351946,773407,335696,178107,484736,72782]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Code&lt;\/th&gt;\n      &lt;th&gt;Canton&lt;\/th&gt;\n      &lt;th&gt;Population&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;dom&#34;:&#34;tpi&#34;,&#34;columnDefs&#34;:[{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:2}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;We can now try the &lt;code&gt;cantonbins&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cantonbins(density, canton_col=&amp;quot;Code&amp;quot;, value_col=&amp;quot;Population&amp;quot;,
           plot_title=&amp;quot;Population size in Swiss Cantons&amp;quot;,
           plot_subtitle = paste0(&amp;quot;Source: &amp;quot;, url))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../post/1705081-cantonbins_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is a lot more we can do with Cartograms and, in a future post, I hope to release a full fork of &lt;a href=&#34;https://github.com/hrbrmstr/statebins&#34;&gt;statebin&lt;/a&gt; so that you can easily install it from Github.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Scrape linked webpages using rvest and purrr</title>
      <link>/2017/04/16/scrape-linked-webpages-using-rvest-and-purrr/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/04/16/scrape-linked-webpages-using-rvest-and-purrr/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The offers on real estate websites aren’t always in an easy-to-use format, especially if you want to compare offers from multiple agencies.&lt;/p&gt;
&lt;p&gt;In a &lt;a href=&#34;https://xvrdm.github.io/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/&#34;&gt;previous post&lt;/a&gt;, we saw how to scrape a listing of apartments on a single page with R. However, listings usually do not include all the details about the items. They usually only list a condensed version of the information and a url to a “detail” page, which contains the rest of the fields. For example, we could not add any insight about “Floors” to our dataset as “Floor” is only detailled on each apartement details page. In this post, we will see how to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;find the URL for each apartment&lt;/li&gt;
&lt;li&gt;scrape details found on each details page&lt;/li&gt;
&lt;li&gt;combine these details into a single dataframe&lt;/li&gt;
&lt;li&gt;merge this detail dataframe with our original dataframe&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;scraping-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scraping the data&lt;/h2&gt;
&lt;div id=&#34;getting-the-urls-for-each-apartment&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting the URLs for each apartment&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load needed packages
suppressMessages(library(xml2))
suppressMessages(library(rvest))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an html document
listing_url &amp;lt;- &amp;quot;https://www.moservernet.ch/en/apartments-for-rent/&amp;quot;
listing_html &amp;lt;- xml2::read_html(listing_url)

# Find all the nodes with class &amp;quot;offer&amp;quot; in id &amp;quot;offers&amp;quot;
offers &amp;lt;- listing_html %&amp;gt;%
  html_nodes(&amp;quot;#offers .offer&amp;quot;)

# Extract the first target url of each first link in each node
offers_urls &amp;lt;- offers %&amp;gt;%
  html_node(&amp;quot;a&amp;quot;) %&amp;gt;%
  html_attr(&amp;quot;href&amp;quot;)

head(offers_urls)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/en/apartments-for-rent/paquis-2-rooms--2454.44.0030&amp;quot;          
## [2] &amp;quot;/en/apartments-for-rent/plainpalais-2-rooms--2040.41.0020&amp;quot;     
## [3] &amp;quot;/en/apartments-for-rent/saint-jean-3-5-rooms--2066.41.0010&amp;quot;    
## [4] &amp;quot;/en/apartments-for-rent/grand-pre-3-rooms--0510.45.0030&amp;quot;       
## [5] &amp;quot;/en/apartments-for-rent/grand-pre-1-5-rooms--2457.41.0020&amp;quot;     
## [6] &amp;quot;/en/apartments-for-rent/grand-saconnex-2-5-rooms--2018.48.0020&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-one-example-to-map-our-scraping&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using one example to map our scraping&lt;/h3&gt;
&lt;p&gt;Using the first link as an example, we can explore how the data should be scraped.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;offer_url &amp;lt;- offers_urls[1]
offer_url&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/en/apartments-for-rent/paquis-2-rooms--2454.44.0030&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The id of each offer is actually available directly in the URL.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;id &amp;lt;- offer_url %&amp;gt;%
  sub(&amp;quot;.*([0-9]{4}\\.[0-9]{2}\\.[0-9]{4}).*&amp;quot;,
      &amp;quot;\\1&amp;quot;, .)
id&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2454.44.0030&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to scrape the data contained at this URL. As links are relative, we start by rebuilding the full link, which we use with &lt;code&gt;xml2::read_html()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create full URL for offer
BASE_URL &amp;lt;- &amp;quot;https://www.moservernet.ch&amp;quot;
offer_full_url &amp;lt;- paste0(BASE_URL, offer_url)

# Scrape HTML for offer
offer_html &amp;lt;- xml2::read_html(offer_full_url)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1704161-scrsh-msrvrn-apartment-source.png&#34; alt=&#34;Screenshot of source code for apartment detail webpage&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Screenshot of source code for apartment detail webpage&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Looking at the source code, we can see that the attributes we are after (“Floor” and “Surface area”) are located in the same node: a &lt;code&gt;h2&lt;/code&gt; tag contained in a &lt;code&gt;td&lt;/code&gt; tag with &lt;code&gt;itemprop=itemOffered&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;offer_attr &amp;lt;- offer_html %&amp;gt;%
  html_node(&amp;quot;[itemprop=itemOffered]&amp;quot;) %&amp;gt;%
  html_text() %&amp;gt;%
  stringr::str_trim() %&amp;gt;%
  stringr::str_split(&amp;quot; - &amp;quot;, simplify = T) %&amp;gt;%
  as.vector()
offer_attr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2 rooms&amp;quot; &amp;quot;24m²&amp;quot;    &amp;quot;Floor 4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a bit more parsing, we can get clean numbers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Find floor data by finding the vector element
# containing text &amp;quot;Floor&amp;quot; and isolating the
# number next to it.
floor &amp;lt;- grep(&amp;quot;Floor&amp;quot;, offer_attr, value = T) %&amp;gt;%
  stringr::str_replace(&amp;quot;Floor&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_trim()
floor&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;4&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Find surface area data by finding the vector 
# element containing text &amp;quot;m²&amp;quot; and isolating the
# number next to it.
surface &amp;lt;- grep(&amp;quot;m²&amp;quot;, offer_attr, value = T) %&amp;gt;%
  stringr::str_replace(&amp;quot;m²&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_trim()
surface&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;24&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if we look closely at the list of urls, there seem to be two types of URLs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(sub(&amp;quot;(/.*/.*/).*&amp;quot;,&amp;quot;\\1&amp;quot;,offers_urls)) %&amp;gt;%
  tibble::as_tibble() %&amp;gt;%
  setNames(c(&amp;quot;URL start with:&amp;quot;,&amp;quot;n&amp;quot;)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 2
##                    `URL start with:`     n
##                                &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
## 1           /en/apartments-for-rent/    21
## 2 /en/residential-property-for-rent/     7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most URLs follow the pattern &lt;code&gt;/en/apartments-for-rent/&amp;lt;address&amp;gt;--&amp;lt;id&amp;gt;&lt;/code&gt; but a few look like &lt;code&gt;/en/residential-property-for-rent/&amp;lt;address&amp;gt;--&amp;lt;id&amp;gt;&lt;/code&gt;. If we open one, we can see that the page layout is different.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1704161-scrsh-msrvrn-property-source.png&#34; alt=&#34;Screenshot of source code for residential detail webpage&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Screenshot of source code for residential detail webpage&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The surface area is still available in a node with &lt;code&gt;[itemprop=itemOffered]&lt;/code&gt;, but the floor is in another node, which seem to be the first node with class &lt;code&gt;price&lt;/code&gt;. With a bit of rewriting on the floor code, we can adapt to the 2 different layouts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The code below can find the floor on both layout types,
# which are identified by a pattern in their url.
floor &amp;lt;- ifelse(
    grepl(&amp;quot;apartments&amp;quot;, offer_url),
    grep(&amp;quot;Floor&amp;quot;, offer_attr, value = T),
    offer_html %&amp;gt;% 
      html_node(&amp;quot;.price&amp;quot;) %&amp;gt;%
      html_text()) %&amp;gt;%
  stringr::str_replace(&amp;quot;Floor[:]{0,1}&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_trim() %&amp;gt;%
  as.numeric()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;scraping-all-links-with-reusable-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scraping all links with reusable code&lt;/h3&gt;
&lt;p&gt;We can now put all our code together in a function and use it on each link. Note that the &lt;code&gt;slow_scrape_extra_info&lt;/code&gt; wrapper just make sure we wait for a little while between each request.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scrape_extra_info &amp;lt;- function(offer_url) {
  BASE_URL &amp;lt;- &amp;quot;https://www.moservernet.ch&amp;quot;
  offer_full_url &amp;lt;- paste0(BASE_URL, offer_url)
  offer_html &amp;lt;- xml2::read_html(offer_full_url)
  
  offer_attr &amp;lt;- offer_html %&amp;gt;%
    html_node(&amp;quot;[itemprop=itemOffered]&amp;quot;) %&amp;gt;%
    html_text() %&amp;gt;%
    stringr::str_trim() %&amp;gt;%
    stringr::str_split(&amp;quot; - &amp;quot;, simplify = T) %&amp;gt;%
    as.vector()

  list(
    id = offer_url %&amp;gt;%
      sub(&amp;quot;.*([0-9]{4}\\.[0-9]{2}\\.[0-9]{4}).*&amp;quot;,
        &amp;quot;\\1&amp;quot;, .),
    
     floor = ifelse(
         grepl(&amp;quot;apartments&amp;quot;, offer_url),
         grep(&amp;quot;Floor&amp;quot;, offer_attr, value = T),
         offer_html %&amp;gt;% 
           html_node(&amp;quot;.price&amp;quot;) %&amp;gt;%
           html_text()) %&amp;gt;%
       stringr::str_replace(&amp;quot;Floor[:]{0,1}&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
       stringr::str_trim() %&amp;gt;%
       as.numeric(),
  
     surface = grep(&amp;quot;m²&amp;quot;, offer_attr, value = T) %&amp;gt;%
       stringr::str_replace(&amp;quot;m²&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
       stringr::str_trim() %&amp;gt;%
       as.numeric()
  )
}

slow_scrape_extra_info &amp;lt;- function(offer_url) {
  Sys.sleep(sample(1:15/10,1))
  scrape_extra_info(offer_url)
}

# Apply the function to each url that contains an offer id
# and store the results into a single dataframe
extra_info &amp;lt;- grep(&amp;quot;.*([0-9]{4}\\.[0-9]{2}\\.[0-9]{4}).*&amp;quot;,
                   offers_urls, value = T) %&amp;gt;%
  purrr::map(slow_scrape_extra_info) %&amp;gt;%
  dplyr::bind_rows() %&amp;gt;%
  na.omit()

knitr::kable(head(extra_info))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;floor&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;surface&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2454.44.0030&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2040.41.0020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2066.41.0010&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;0510.45.0030&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2457.41.0020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018.48.0020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thanks to the common &lt;code&gt;id&lt;/code&gt; field, we can &lt;a href=&#34;http://dplyr.tidyverse.org/reference/join.html&#34;&gt;join&lt;/a&gt; this dataframe with the one obtained in the &lt;a href=&#34;https://xvrdm.github.io/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/&#34;&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Scrape a list of rental offers using rvest and purrr</title>
      <link>/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/</guid>
      <description>&lt;script src=&#34;../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../rmarkdown-libs/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;../rmarkdown-libs/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../rmarkdown-libs/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../rmarkdown-libs/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../rmarkdown-libs/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../rmarkdown-libs/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;../rmarkdown-libs/leaflet-label/leaflet.label.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../rmarkdown-libs/leaflet-label/leaflet.label.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/leaflet-providers/leaflet-providers.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/leaflet-providers-plugin/leaflet-providers-plugin.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The offers on real estate websites aren’t always in an easy-to-use format, especially if you want to compare offers from multiple agencies.&lt;/p&gt;
&lt;p&gt;In this post, we will see how to use R to scrape the details about the apartments listed on a single page on a real estate website.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scraping-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scraping the data&lt;/h2&gt;
&lt;div id=&#34;getting-to-know-the-site&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting to know the site&lt;/h3&gt;
&lt;p&gt;We start by looking at the real estate agent website. The section containing apartment rental offers can be found at this &lt;a href=&#34;https://www.moservernet.ch/en/apartments-for-rent/&#34;&gt;URL&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1703311-scrsh-website-msrvrn.png&#34; alt=&#34;Apartment Rental section on website&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Apartment Rental section on website&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Each flat seem to be displayed in its own little box, which should derive from code not to hard to parse. But it would be even easier if the data was grabed from some kind of API.&lt;/p&gt;
&lt;p&gt;Looking at the network tab of the inspector, it doesn’t look like we can easily identify an API.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/1703311-scrsh-network-msrvrn.png&#34; alt=&#34;Network tab from inspector tool on Apartment Rental section website&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Network tab from inspector tool on Apartment Rental section website&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We will need to fall back on scraping.&lt;/p&gt;
&lt;p&gt;Looking at the page source, we can see that all the information seem to be present so we won’t need to rely on a headless browser to execute Javascript. The data seems neatly organised.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/1703311-scrsh-source-msrvrn.png&#34; alt=&#34;Source code from Apartment Rental section on website&#34; /&gt; On the screenshot above, we can see that all the apartments are in a &lt;code&gt;div&lt;/code&gt; with the &lt;code&gt;id=offers&lt;/code&gt; (blue rectangle). Then each apartment is contained in its own &lt;code&gt;div&lt;/code&gt; with the &lt;code&gt;class=offer&lt;/code&gt; (red rectangles). We can also see that the different attributes of each flat are in separated &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;h&lt;/code&gt; tags, usually with meaningful &lt;code&gt;class&lt;/code&gt; like &lt;code&gt;price-offer&lt;/code&gt;, &lt;code&gt;charge-offer&lt;/code&gt;, &lt;code&gt;size-offer&lt;/code&gt;… Very conveniently, and probably because they have a google map applet, the latitude and longitude are already available with the classes &lt;code&gt;info-obj-address-lat&lt;/code&gt; and &lt;code&gt;info-obj-address-lng&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-the-page-source-into-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting the page source into R&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;rvest&lt;/code&gt; library, we can grab the code of the site.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load needed packages
suppressMessages(library(dplyr))
suppressMessages(library(xml2))
suppressMessages(library(rvest))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create an html document
listing_url &amp;lt;- &amp;quot;https://www.moservernet.ch/en/apartments-for-rent/&amp;quot;
listing_html &amp;lt;- xml2::read_html(listing_url)
listing_html&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {xml_document}
## &amp;lt;html&amp;gt;
## [1] &amp;lt;head&amp;gt;\n&amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html;charset=u ...
## [2] &amp;lt;body&amp;gt;\n\t\t&amp;lt;div id=&amp;quot;main&amp;quot;&amp;gt;\t\n\t\t\t&amp;lt;div class=&amp;quot;container&amp;quot; style=&amp;quot;h ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;isolate-the-html-for-the-offers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Isolate the html for the offers&lt;/h3&gt;
&lt;p&gt;Then we isolate the nodes with &lt;code&gt;class=offer&lt;/code&gt; contained in the &lt;code&gt;div&lt;/code&gt; with &lt;code&gt;id=offers&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;listing_offers &amp;lt;- listing_html %&amp;gt;%
  rvest::html_nodes(&amp;quot;#offers .offer&amp;quot;)
head(listing_offers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {xml_nodeset (6)}
## [1] &amp;lt;div class=&amp;quot;offer cat2 cat3 1&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-f ...
## [2] &amp;lt;div class=&amp;quot;offer cat2 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-for-re ...
## [3] &amp;lt;div class=&amp;quot;offer cat3 cat4 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-f ...
## [4] &amp;lt;div class=&amp;quot;offer cat3 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-for-re ...
## [5] &amp;lt;div class=&amp;quot;offer cat1 cat2 2&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-f ...
## [6] &amp;lt;div class=&amp;quot;offer cat2 cat3 3&amp;quot;&amp;gt;\n\t\t\t\t\t&amp;lt;a href=&amp;quot;/en/apartments-f ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parsing-the-offers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Parsing the offers&lt;/h3&gt;
&lt;p&gt;Now that we have a list of offers, we need to find a way to extract the data of interest from each offer and store it in a usable format. There are at least two way to proceed: a “field centric” way and an “offer centric” way.&lt;/p&gt;
&lt;div id=&#34;parsing-with-the-field-centric-way&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Parsing with the “field centric” way&lt;/h4&gt;
&lt;p&gt;In the “field centric” way, we grab one field of interest (&lt;code&gt;rent&lt;/code&gt;, &lt;code&gt;rooms&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;…) at a time for all the offers. We end up with vectors containing the value of the field for each offer. These vector can then be combined into a dataframe. The “field centric” way is described in the lego movie example on &lt;a href=&#34;http://web.archive.org/web/20160113072819/https://github.com/hadley/rvest&#34;&gt;&lt;code&gt;rvest&lt;/code&gt;’s github repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; can be stored as text and only need a bit of cleanup.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;id &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.ref&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  stringr::str_replace(&amp;quot;Ref. &amp;quot;,&amp;quot;&amp;quot;)

address &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.location-offer&amp;quot;) %&amp;gt;%
  rvest::html_text()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rooms&lt;/code&gt;, &lt;code&gt;latitude&lt;/code&gt;, &lt;code&gt;longitude&lt;/code&gt;, &lt;code&gt;rent&lt;/code&gt; and &lt;code&gt;charges&lt;/code&gt; are better saved as numeric after removal of prefix/suffix like currencies. Note that &lt;code&gt;stringr&lt;/code&gt;’s &lt;code&gt;str_replace&lt;/code&gt; can search for regular expressions pattern, which let us do things like removing &lt;code&gt;room&lt;/code&gt; and &lt;code&gt;rooms&lt;/code&gt; in one call.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rooms &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.ref-offer&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  stringr::str_replace(&amp;quot; room[s]*&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  as.numeric()

latitude &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.infos-objet-address-lat&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  as.numeric()

longitude &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.infos-objet-address-lng&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  as.numeric()

rent &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.price-offer&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  stringr::str_replace(&amp;quot;CHF &amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_replace_all(&amp;quot;[.]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_replace(&amp;quot;[-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  as.numeric()

charges &amp;lt;- listing_offers %&amp;gt;%
  rvest::html_nodes(&amp;quot;.charge-offer&amp;quot;) %&amp;gt;%
  rvest::html_text() %&amp;gt;%
  stringr::str_replace(&amp;quot;Charges: CHF &amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_replace_all(&amp;quot;[.]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  stringr::str_replace(&amp;quot;[-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
  as.numeric()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All these vectors can then be combined in a dataframe, which is nicely displayed in an interactive datatable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;offers &amp;lt;- data.frame(id, 
                     rooms, 
                     address, 
                     latitude, 
                     longitude, 
                     rent, 
                     charges)

library(DT)
DT::datatable(
  offers,
  options = list(pageLength = 5, dom = &amp;#39;tpi&amp;#39;),
  rownames = FALSE,
  caption = &amp;quot;Table 1 : Offers scraped using the field centric way&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;caption&#34;:&#34;&lt;caption&gt;Table 1 : Offers scraped using the field centric way&lt;\/caption&gt;&#34;,&#34;data&#34;:[[&#34;0033.41.0030&#34;,&#34;2040.41.0020&#34;,&#34;2066.41.0010&#34;,&#34;0510.45.0030&#34;,&#34;2457.41.0020&#34;,&#34;2018.48.0020&#34;,&#34;2020.47.0020&#34;,&#34;2190.44.0030&#34;,&#34;0577.43.0340&#34;,&#34;0090.45.0040&#34;,&#34;0108.43.0020&#34;,&#34;0022.42.0010&#34;,&#34;0033.45.0020&#34;,&#34;0138.40.0020&#34;,&#34;0690.41.0020&#34;,&#34;2062.43.0050&#34;,&#34;0571.43.0040&#34;,&#34;0022.40.0010&#34;,&#34;0022.43.0010&#34;,&#34;0082.44.0030&#34;,&#34;0569.42.0210&#34;,&#34;2581.43.0010&#34;,&#34;0695.42.0010&#34;,&#34;0615.45.0010&#34;,&#34;0294.43.0020&#34;,&#34;2027.46.0060&#34;,&#34;0579.51.0010&#34;],[2.5,2,3.5,3,1.5,2.5,2.5,1,3.5,3.5,4.5,3.5,4.5,3.5,4.5,4,4.5,4.5,4,3,5.5,5.5,6,6,7.5,6,6.5],[&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Henri-ChristinÃ© 6&#34;,&#34;Rue du BelvÃ©dÃ¨re 9&#34;,&#34;Rue Chandieu 1&#34;,&#34;Rue du Vidollet 11&#34;,&#34;Chemin Taverney 6&#34;,&#34;Chemin Taverney 10&#34;,&#34;Grand-Rue 10&#34;,&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue de la DÃ´le 12&#34;,&#34;Chemin des Palettes 33&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Michel-Chauvet 4&#34;,&#34;Chemin de Castelver 10&#34;,&#34;Rue Lamartine 24 B&#34;,&#34;Rue de la Faucille 14&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Rue Saint-LÃ©ger 8&#34;,&#34;Rue du Fort-Barreau 13&#34;,&#34;Chemin Charles-Poluzzi 29&#34;,&#34;Rue du ChÃ¢teau 2&#34;,&#34;Route de ChÃªne 53&#34;,&#34;Rue Jacques-Dalphin 37&#34;,&#34;Rue Charles-Giron 1&#34;,&#34;Chemin de Beau-Soleil 5&#34;],[46.2024683,46.1945565,46.2049981,46.2158774,46.2159927,46.2299972,46.2297057,46.20209,46.2122871,46.2076048,46.1750094,46.2167452,46.2024683,46.1982716,46.1655653,46.2111247,46.2112803,46.2167452,46.2167452,46.1976599,46.2113528,46.1792898,46.2043919,46.2001689,46.1818628,46.2061894,46.1879451],[6.1840869,6.1424891,6.1311477,6.1344373,6.1381931,6.1177381,6.118199,6.1451254,6.1143063,6.13172,6.1193707,6.1316818,6.1840869,6.1565411,6.1866597,6.1295749,6.1399257,6.1316818,6.1316818,6.1462625,6.1407533,6.1479551,6.1308513,6.1723494,6.1401097,6.1306914,6.1598356],[1220,1250,1350,1500,1500,1580,1580,1600,1670,1750,2100,2160,2200,2300,2360,2400,2800,3030,3117,3200,3350,3500,4200,4500,4900,5050,6500],[95,85,null,120,70,90,90,100,165,145,170,160,205,155,140,180,170,200,220,150,197,200,265,350,350,350,385]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id&lt;\/th&gt;\n      &lt;th&gt;rooms&lt;\/th&gt;\n      &lt;th&gt;address&lt;\/th&gt;\n      &lt;th&gt;latitude&lt;\/th&gt;\n      &lt;th&gt;longitude&lt;\/th&gt;\n      &lt;th&gt;rent&lt;\/th&gt;\n      &lt;th&gt;charges&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;dom&#34;:&#34;tpi&#34;,&#34;columnDefs&#34;:[{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:[1,3,4,5,6]}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;parsing-with-the-offer-centric-way&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Parsing with the “offer centric” way&lt;/h4&gt;
&lt;p&gt;In the “offer centric” way, we parse one offer at a time, extract all the fields of interest and store it into a list. We end up with a list of lists, where each list contain all the fields for one offer.&lt;/p&gt;
&lt;p&gt;To parse each offer, we are going to create a function &lt;code&gt;parse_offer&lt;/code&gt; that works well on one offer and apply it to each offer with the help of the &lt;code&gt;purrr&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Note that we are searching only for one value, so we use &lt;code&gt;html_node&lt;/code&gt; and not &lt;code&gt;html_nodes&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parse_offer &amp;lt;- function(offer) {
  list(
    id = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.ref&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      stringr::str_replace(&amp;quot;Ref. &amp;quot;,&amp;quot;&amp;quot;),
    
    address = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.location-offer&amp;quot;) %&amp;gt;%
      rvest::html_text(),
  
    room = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.ref-offer&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      stringr::str_replace(&amp;quot; room[s]*&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      as.numeric(),
    
    latitude = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.infos-objet-address-lat&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      as.numeric(),

    longitude = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.infos-objet-address-lng&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      as.numeric(),

    rent = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.price-offer&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      stringr::str_replace(&amp;quot;CHF &amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      stringr::str_replace_all(&amp;quot;[.]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      stringr::str_replace(&amp;quot;[-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      as.numeric(),

    charges = offer %&amp;gt;%
      rvest::html_node(&amp;quot;.charge-offer&amp;quot;) %&amp;gt;%
      rvest::html_text() %&amp;gt;%
      stringr::str_replace(&amp;quot;Charges: CHF &amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      stringr::str_replace_all(&amp;quot;[.]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      stringr::str_replace(&amp;quot;[-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
      as.numeric()
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;purrr::map&lt;/code&gt; will create a list of lists. Each list in the list of lists can be bound as a row in a dataframe, thanks to &lt;code&gt;dplyr::bind_rows()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(purrr))

offers &amp;lt;- listing_offers %&amp;gt;%
  purrr::map(parse_offer) %&amp;gt;%
  dplyr::bind_rows() %&amp;gt;%
  na.omit()

DT::datatable(
  offers,
  options = list(pageLength = 5, dom = &amp;#39;tpi&amp;#39;),
  rownames = FALSE,
  caption = &amp;quot;Table 2 : Offers scraped using the offer centric way&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;caption&#34;:&#34;&lt;caption&gt;Table 2 : Offers scraped using the offer centric way&lt;\/caption&gt;&#34;,&#34;data&#34;:[[&#34;0033.41.0030&#34;,&#34;2040.41.0020&#34;,&#34;0510.45.0030&#34;,&#34;2457.41.0020&#34;,&#34;2018.48.0020&#34;,&#34;2020.47.0020&#34;,&#34;2190.44.0030&#34;,&#34;0577.43.0340&#34;,&#34;0090.45.0040&#34;,&#34;0108.43.0020&#34;,&#34;0022.42.0010&#34;,&#34;0033.45.0020&#34;,&#34;0138.40.0020&#34;,&#34;0690.41.0020&#34;,&#34;2062.43.0050&#34;,&#34;0571.43.0040&#34;,&#34;0022.40.0010&#34;,&#34;0022.43.0010&#34;,&#34;0082.44.0030&#34;,&#34;0569.42.0210&#34;,&#34;2581.43.0010&#34;,&#34;0695.42.0010&#34;,&#34;0615.45.0010&#34;,&#34;0294.43.0020&#34;,&#34;2027.46.0060&#34;,&#34;0579.51.0010&#34;],[&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Henri-ChristinÃ© 6&#34;,&#34;Rue Chandieu 1&#34;,&#34;Rue du Vidollet 11&#34;,&#34;Chemin Taverney 6&#34;,&#34;Chemin Taverney 10&#34;,&#34;Grand-Rue 10&#34;,&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue de la DÃ´le 12&#34;,&#34;Chemin des Palettes 33&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Michel-Chauvet 4&#34;,&#34;Chemin de Castelver 10&#34;,&#34;Rue Lamartine 24 B&#34;,&#34;Rue de la Faucille 14&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Rue Saint-LÃ©ger 8&#34;,&#34;Rue du Fort-Barreau 13&#34;,&#34;Chemin Charles-Poluzzi 29&#34;,&#34;Rue du ChÃ¢teau 2&#34;,&#34;Route de ChÃªne 53&#34;,&#34;Rue Jacques-Dalphin 37&#34;,&#34;Rue Charles-Giron 1&#34;,&#34;Chemin de Beau-Soleil 5&#34;],[2.5,2,3,1.5,2.5,2.5,1,3.5,3.5,4.5,3.5,4.5,3.5,4.5,4,4.5,4.5,4,3,5.5,5.5,6,6,7.5,6,6.5],[46.2024683,46.1945565,46.2158774,46.2159927,46.2299972,46.2297057,46.20209,46.2122871,46.2076048,46.1750094,46.2167452,46.2024683,46.1982716,46.1655653,46.2111247,46.2112803,46.2167452,46.2167452,46.1976599,46.2113528,46.1792898,46.2043919,46.2001689,46.1818628,46.2061894,46.1879451],[6.1840869,6.1424891,6.1344373,6.1381931,6.1177381,6.118199,6.1451254,6.1143063,6.13172,6.1193707,6.1316818,6.1840869,6.1565411,6.1866597,6.1295749,6.1399257,6.1316818,6.1316818,6.1462625,6.1407533,6.1479551,6.1308513,6.1723494,6.1401097,6.1306914,6.1598356],[1220,1250,1500,1500,1580,1580,1600,1670,1750,2100,2160,2200,2300,2360,2400,2800,3030,3117,3200,3350,3500,4200,4500,4900,5050,6500],[95,85,120,70,90,90,100,165,145,170,160,205,155,140,180,170,200,220,150,197,200,265,350,350,350,385]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;id&lt;\/th&gt;\n      &lt;th&gt;address&lt;\/th&gt;\n      &lt;th&gt;room&lt;\/th&gt;\n      &lt;th&gt;latitude&lt;\/th&gt;\n      &lt;th&gt;longitude&lt;\/th&gt;\n      &lt;th&gt;rent&lt;\/th&gt;\n      &lt;th&gt;charges&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;pageLength&#34;:5,&#34;dom&#34;:&#34;tpi&#34;,&#34;columnDefs&#34;:[{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:[2,3,4,5,6]}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false,&#34;lengthMenu&#34;:[5,10,25,50,100]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualize the data&lt;/h2&gt;
&lt;div id=&#34;looking-at-bivariate-relationship&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Looking at bivariate relationship&lt;/h3&gt;
&lt;p&gt;We can check if rent and charges seem to be correlated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(ggplot2))
suppressMessages(library(hrbrthemes))

offers %&amp;gt;% ggplot(aes(x=rent, y=charges)) + 
  geom_jitter(alpha=0.5) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, size=0.5, se = F, color=&amp;quot;black&amp;quot;) + 
  annotate(geom=&amp;quot;label&amp;quot;, x=max(offers$rent), y=min(offers$charges),
           label=paste(&amp;quot;r(rent, charge) =&amp;quot;, round(cor(offers$rent, offers$charges), 3)), 
           hjust=1, fill=&amp;quot;black&amp;quot;, alpha=&amp;quot;0.5&amp;quot;, color=&amp;quot;white&amp;quot;) +
  labs(title=stringr::str_to_title(&amp;quot;Do charges go up with rent?&amp;quot;),
       subtitle=&amp;quot;There seems to be a positive linear relationship between rent and charges.&amp;quot;) +
  theme_ipsum_rc()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../post/1703311-scrape-a-list-of-rental-offers-using-rvest-and-purrr_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;seeing-the-results-on-a-map&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Seeing the results on a map&lt;/h3&gt;
&lt;p&gt;Lastly, because latitude and longitude were so easily obtained, we can pin each flat on a leaflet map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressMessages(library(leaflet))

m &amp;lt;- leaflet(offers) %&amp;gt;%
  addProviderTiles(&amp;quot;CartoDB.Positron&amp;quot;) %&amp;gt;%
  addMarkers(lng=~longitude,
             lat=~latitude,
             popup=offers$address)
m&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addProviderTiles&#34;,&#34;args&#34;:[&#34;CartoDB.Positron&#34;,null,null,{&#34;errorTileUrl&#34;:&#34;&#34;,&#34;noWrap&#34;:false,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false}]},{&#34;method&#34;:&#34;addMarkers&#34;,&#34;args&#34;:[[46.2024683,46.1945565,46.2158774,46.2159927,46.2299972,46.2297057,46.20209,46.2122871,46.2076048,46.1750094,46.2167452,46.2024683,46.1982716,46.1655653,46.2111247,46.2112803,46.2167452,46.2167452,46.1976599,46.2113528,46.1792898,46.2043919,46.2001689,46.1818628,46.2061894,46.1879451],[6.1840869,6.1424891,6.1344373,6.1381931,6.1177381,6.118199,6.1451254,6.1143063,6.13172,6.1193707,6.1316818,6.1840869,6.1565411,6.1866597,6.1295749,6.1399257,6.1316818,6.1316818,6.1462625,6.1407533,6.1479551,6.1308513,6.1723494,6.1401097,6.1306914,6.1598356],null,null,null,{&#34;clickable&#34;:true,&#34;draggable&#34;:false,&#34;keyboard&#34;:true,&#34;title&#34;:&#34;&#34;,&#34;alt&#34;:&#34;&#34;,&#34;zIndexOffset&#34;:0,&#34;opacity&#34;:1,&#34;riseOnHover&#34;:false,&#34;riseOffset&#34;:250},[&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Henri-ChristinÃ© 6&#34;,&#34;Rue Chandieu 1&#34;,&#34;Rue du Vidollet 11&#34;,&#34;Chemin Taverney 6&#34;,&#34;Chemin Taverney 10&#34;,&#34;Grand-Rue 10&#34;,&#34;Chemin de Maisonneuve 12 B&#34;,&#34;Rue de la DÃ´le 12&#34;,&#34;Chemin des Palettes 33&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue des Cavaliers 13&#34;,&#34;Rue Michel-Chauvet 4&#34;,&#34;Chemin de Castelver 10&#34;,&#34;Rue Lamartine 24 B&#34;,&#34;Rue de la Faucille 14&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Avenue Giuseppe-Motta 16&#34;,&#34;Rue Saint-LÃ©ger 8&#34;,&#34;Rue du Fort-Barreau 13&#34;,&#34;Chemin Charles-Poluzzi 29&#34;,&#34;Rue du ChÃ¢teau 2&#34;,&#34;Route de ChÃªne 53&#34;,&#34;Rue Jacques-Dalphin 37&#34;,&#34;Rue Charles-Giron 1&#34;,&#34;Chemin de Beau-Soleil 5&#34;],null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[46.1655653,46.2299972],&#34;lng&#34;:[6.1143063,6.1866597]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ressources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ressources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;Homepage for rvest repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stat4701.github.io/edav/2015/04/02/rvest_tutorial/&#34;&gt;Tutorial explaining rvest basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>