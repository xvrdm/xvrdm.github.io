<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Invalid Input</title>
    <link>/post/</link>
    <description>Recent content in Posts on Invalid Input</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>That time I thought I invented pluck</title>
      <link>/2018/01/29/that-time-i-thought-i-invented-pluck/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/29/that-time-i-thought-i-invented-pluck/</guid>
      <description>Foreword Just before publishing this article, I read the purrr cheatsheet and realised that what I developed here already exists. Its name is pluck and I definitely suggest that you use it.
 TL;DR This is an attempt to write a R helper function to subset lists that would be as nice as get-in in the functional programming language Clojure. As said above, this is in fact already available in purrr.</description>
    </item>
    
    <item>
      <title>Getting hy with pandas</title>
      <link>/2017/10/26/getting-hy-with-pandas/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/26/getting-hy-with-pandas/</guid>
      <description>TL;DR In this post, we scratch the surface of Hy, a lisp dialect for python, by converting a pandas pipeline. The post assumes some familiarity with pandas.
  Introduction I find the Hy project really interesting. From the website:
 Hy is a wonderful dialect of Lisp that’s embedded in Python. Since Hy transforms its Lisp code into the Python Abstract Syntax Tree, you have the whole beautiful world of Python at your fingertips, in Lisp form!</description>
    </item>
    
    <item>
      <title>Socialize your blogdown</title>
      <link>/2017/10/23/socialize-your-blogdown/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/23/socialize-your-blogdown/</guid>
      <description>TL;DR In this post, we show how to modify the default bookdown template so that rich cards are generated when links are shared on Twitter. We also try to learn a bit of Blogdown/Hugo templating along the way.
  Tags and Twitter Tags Social &amp;lt;meta&amp;gt; tags are HTML tags at the top of your pages that social network and search engine can parse to extract content and generate rich previews.</description>
    </item>
    
    <item>
      <title>Create maps from SITG files with sf and ggplot2</title>
      <link>/2017/09/15/create-maps-from-sitg-files-with-sf-and-ggplot2/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/09/15/create-maps-from-sitg-files-with-sf-and-ggplot2/</guid>
      <description>TL;DR In this post, we see how to create a map in R using the sf and ggplot2 package, starting from freely available SHAPE files.
 Introduction In Geneva (Switzerland), we are lucky to have SITG, a website with tons of geographical open datasets. I wanted to try my hand at doing maps in R for some time now, but could not find a way that felt integrated with the other packages I usually work with.</description>
    </item>
    
    <item>
      <title>Scraping javascript generated content with splashr</title>
      <link>/2017/07/26/scraping-javascript-generated-content-with-splashr/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/26/scraping-javascript-generated-content-with-splashr/</guid>
      <description>Introduction While scraping rental listings, it’s useful to verify that the scripts managed to grab all the offers. This is nice to have on simple fully loaded single page, but even nicer if the rental listings are set up as a infinite scroll page, which seem increasingly popular on real estate websites and require multiple calls from the scraper.
Count of offers on rental websites.
 Even when they don’t load all the results, the websites nearly always indicate the number of matched offers.</description>
    </item>
    
    <item>
      <title>Testing Flask SQLAlchemy database with pytest</title>
      <link>/2017/07/03/testing-flask-sqlalchemy-database-with-pytest/</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/03/testing-flask-sqlalchemy-database-with-pytest/</guid>
      <description>Introduction Early in the tutorial, the author explains how to set up your app to use unittest and the Flask-Testing extension for its test framework. Since I wanted to use pytest, this was a good opportunity to explore the test setup a bit more in depth.
 Running pytest from a script Firstly, add pytest to your requirements.txt and place a dummy test in the project/tests.
def test_dummy(): assert True Secondly, add a manager.</description>
    </item>
    
    <item>
      <title>Clojure for pythonista - Manipulating strings</title>
      <link>/2017/06/13/clojure-for-pythonista---manipulating-strings/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/13/clojure-for-pythonista---manipulating-strings/</guid>
      <description>Foreword I am trying to learn clojure. This series of posts is my attempt to solve beginner exercises both in python and clojure. Exercises are inspired by the excellent Reuven Lerner’s Practice Makes Python and other sources like Learn python the hard way. Before trying any exercises, you can read an excellent introduction to clojure : Brave Clojure.
 Introduction This exercise introduces ways to deal with strings.
 Goal Create a command line script that asks the user to enter a word, sort the letters in alphabetic order and output the sentence “Your letters are: ”.</description>
    </item>
    
    <item>
      <title>Clojure for pythonista - User Input/Loop/Conditional</title>
      <link>/2017/06/08/clojure-for-pythonista---user-input/loop/conditional/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/08/clojure-for-pythonista---user-input/loop/conditional/</guid>
      <description>Foreword I am trying to learn clojure. This series of posts is my attempt to solve beginner exercises both in python and clojure. Exercises are inspired by the excellent Reuven Lerner’s Practice Makes Python and other sources like Learn python the hard way. Before trying any exercises, you can read an excellent introduction to clojure : Brave Clojure.
 Introduction This exercise introduces the following concepts: user-input, conditional and loop.</description>
    </item>
    
    <item>
      <title>A minimal emacs setup with orgmode</title>
      <link>/2017/05/29/a-minimal-emacs-setup-with-orgmode/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/29/a-minimal-emacs-setup-with-orgmode/</guid>
      <description>Foreword Trying to start using emacs can be a bit intimidating. Very rough looking outside the box, complex keyboard shortcuts, configuration in emacs-elisp language… I personally decided to try the switch (from vim) for the following reasons:
 once configured well, emacs can rival in features with many of IDE. Elpy looks great for python and CIDER looks amazing for clojure. with EVIL mode, you can use VIM key-bindings in emacs org-mode lets you do things you wouldn’t believe possible with plain text emacs can look good!</description>
    </item>
    
    <item>
      <title>Create Swiss cantons cartogram with ggplot2</title>
      <link>/2017/05/08/create-swiss-cantons-cartogram-with-ggplot2/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/08/create-swiss-cantons-cartogram-with-ggplot2/</guid>
      <description>Introduction While reading rweekly past issues, I stumbbled upon a post from Max Humber, explaining how he tried to design a tile grid map / state cartogram for Canada. I had never seen such design and thought that it would be a great fit for Swiss cantons. While browsing the excellent repositories of Bob Rudis, I realised that he had written statebin, a ggplot extension to easily create US state cartogram.</description>
    </item>
    
    <item>
      <title>Scrape linked webpages using rvest and purrr</title>
      <link>/2017/04/16/scrape-linked-webpages-using-rvest-and-purrr/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/04/16/scrape-linked-webpages-using-rvest-and-purrr/</guid>
      <description>Introduction The offers on real estate websites aren’t always in an easy-to-use format, especially if you want to compare offers from multiple agencies.
In a previous post, we saw how to scrape a listing of apartments on a single page with R. However, listings usually do not include all the details about the items. They usually only list a condensed version of the information and a url to a “detail” page, which contains the rest of the fields.</description>
    </item>
    
    <item>
      <title>Scrape a list of rental offers using rvest and purrr</title>
      <link>/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/31/scrape-a-list-of-rental-offers-using-rvest-and-purrr/</guid>
      <description>Introduction The offers on real estate websites aren’t always in an easy-to-use format, especially if you want to compare offers from multiple agencies.
In this post, we will see how to use R to scrape the details about the apartments listed on a single page on a real estate website.
 Scraping the data Getting to know the site We start by looking at the real estate agent website.</description>
    </item>
    
  </channel>
</rss>